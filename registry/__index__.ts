// @ts-nocheck

/**
 * This file is autogenerated by @link https://github.com/plvo/shuip/blob/main/scripts/generate-registry.ts
 * Do not edit this file directly.
 */

import * as React from 'react';

interface RegistryComponent {
  name: string;
  path: string;
  code: string;
  component: any;
}

export const registryIndex: Record<string, RegistryComponent> = {
  'input-field': {
    name: 'input-field',
    path: '#/registry/ui/input-field.tsx',
    code: "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Eye, EyeOff } from 'lucide-react';\nimport * as React from 'react';\nimport type { ControllerRenderProps, FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\n\nexport interface InputFieldProps<T extends FieldValues> extends React.ComponentProps<typeof Input> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  label?: string;\n  description?: string;\n}\n\nexport function InputField<T extends FieldValues>({ register, label, description, ...props }: InputFieldProps<T>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const getInputType = () => {\n    if (props.type === 'password') {\n      return showPassword ? 'text' : 'password';\n    }\n    return props.type ?? 'text';\n  };\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    field: ControllerRenderProps<FieldValues, FieldPath<FieldValues>>,\n  ) => {\n    const value = e.target.value;\n    if (props.type === 'number') return field.onChange(value === '' ? '' : Number(value));\n    if (props.type === 'date') return field.onChange(value === '' ? '' : new Date(value));\n    return field.onChange(value);\n  };\n\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => {\n        return (\n          <FormItem>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-xs opacity-80' />\n            </FormLabel>\n            <FormControl>\n              <div className='relative'>\n                <Input {...field} {...props} type={getInputType()} onChange={(e) => onChange(e, field)} />\n                {props.type === 'password' && (\n                  <PasswordButton showPassword={showPassword} setShowPassword={setShowPassword} />\n                )}\n              </div>\n            </FormControl>\n            {description && <p className='text-muted-foreground text-xs'>{description}</p>}\n            <FormMessage className='sm:hidden text-xs text-left opacity-80' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\ninterface PasswordButtonProps {\n  showPassword: boolean;\n  setShowPassword: (showPassword: boolean) => void;\n}\n\nfunction PasswordButton({ showPassword, setShowPassword }: PasswordButtonProps) {\n  return (\n    <Button\n      type='button'\n      variant='ghost'\n      size='sm'\n      className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n      onClick={() => setShowPassword(!showPassword)}\n      tabIndex={-1}\n      aria-label={showPassword ? 'Hide password' : 'Show password'}\n    >\n      {showPassword ? <EyeOff className='size-4' aria-hidden='true' /> : <Eye className='size-4' aria-hidden='true' />}\n      <span className='sr-only'>{showPassword ? 'Hide password' : 'Show password'}</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/input-field.tsx')),
  },
  'submit-button': {
    name: 'submit-button',
    path: '#/registry/ui/submit-button.tsx',
    code: "import { Button, type buttonVariants } from '@/components/ui/button';\nimport { ReloadIcon } from '@radix-ui/react-icons';\nimport type { VariantProps } from 'class-variance-authority';\nimport type * as React from 'react';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface SubmitButtonProps extends ButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: React.JSX.Element;\n}\n\nexport function SubmitButton({\n  children,\n  disabled,\n  loading,\n  icon = <ReloadIcon className='mr-2 size-4 animate-spin' />,\n  ...props\n}: SubmitButtonProps) {\n  return (\n    <Button type='submit' variant={'default'} className={'w-full'} disabled={disabled || loading} {...props}>\n      {loading && icon}\n      {children}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/submit-button.tsx')),
  },
  'query-boundary': {
    name: 'query-boundary',
    path: '#/registry/ui/query-boundary.tsx',
    code: "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { QueryErrorResetBoundary } from '@tanstack/react-query';\nimport { AlertTriangle, RefreshCcw } from 'lucide-react';\nimport * as React from 'react';\nimport { ErrorBoundary, type FallbackProps } from 'react-error-boundary';\n\ninterface QueryBoundaryProps {\n  children: React.ReactNode;\n  queryKeys?: string[];\n  loadingFallback?: React.ReactNode;\n  errorFallback?: (props: FallbackProps) => React.ReactNode;\n}\n\nexport function QueryBoundary({\n  children,\n  queryKeys = [],\n  loadingFallback = 'Loading...',\n  errorFallback,\n}: QueryBoundaryProps) {\n  return (\n    <QueryErrorResetBoundary>\n      {({ reset }) => (\n        <ErrorBoundary\n          onReset={reset}\n          fallbackRender={(props) =>\n            errorFallback ? errorFallback(props) : <DefaultErrorFallback {...props} queryKeys={queryKeys} />\n          }\n        >\n          <React.Suspense fallback={loadingFallback}>{children}</React.Suspense>\n        </ErrorBoundary>\n      )}\n    </QueryErrorResetBoundary>\n  );\n}\n\nexport function DefaultErrorFallback({\n  error,\n  resetErrorBoundary,\n  queryKeys = [],\n}: FallbackProps & { queryKeys?: string[] }) {\n  return (\n    <div className='p-6 rounded-lg border border-destructive/30 bg-destructive/5 flex flex-col items-center justify-center space-y-4 text-center'>\n      <AlertTriangle className='text-destructive size-12' />\n      <div>\n        <h3 className='text-lg font-semibold mb-2'>Oops, something went wrong!</h3>\n        <p className='text-muted-foreground'>{error.message || 'Unexpected error'}</p>\n        {queryKeys.length && (\n          <p className='text-xs text-muted-foreground mt-2'>\n            Concerned quer{queryKeys.length > 1 ? 'ies' : 'y'}: {queryKeys.join(', ')}\n          </p>\n        )}\n      </div>\n      <Button onClick={resetErrorBoundary} variant='outline' className='gap-2'>\n        <RefreshCcw className='size-4' />\n        Retry\n      </Button>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/query-boundary.tsx')),
  },
  'copy-button': {
    name: 'copy-button',
    path: '#/registry/ui/copy-button.tsx',
    code: "'use client';\n\nimport { Button, type buttonVariants } from '@/components/ui/button';\nimport type { VariantProps } from 'class-variance-authority';\nimport { CheckIcon, Copy } from 'lucide-react';\nimport * as React from 'react';\n\nconst DEFAULT_TIMEOUT = 2000;\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface CopyButtonProps extends ButtonProps {\n  value: string;\n  copiedIcon?: React.ReactNode;\n  notCopiedIcon?: React.ReactNode;\n}\n\nasync function copyToClipboardWithMeta(value: string) {\n  navigator.clipboard.writeText(value);\n}\n\nexport function CopyButton({ value, copiedIcon = <CheckIcon />, notCopiedIcon = <Copy />, ...props }: CopyButtonProps) {\n  const [hasCopied, setHasCopied] = React.useState(false);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false);\n    }, DEFAULT_TIMEOUT);\n  }, [hasCopied]);\n\n  return (\n    <Button\n      size='icon'\n      variant={'ghost'}\n      className={'z-10 size-4'}\n      onClick={() => {\n        copyToClipboardWithMeta(value);\n        setHasCopied(true);\n      }}\n      {...props}\n    >\n      <span className='sr-only'>Copy</span>\n      {hasCopied ? copiedIcon : notCopiedIcon}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/copy-button.tsx')),
  },
  'radio-field': {
    name: 'radio-field',
    path: '#/registry/ui/radio-field.tsx',
    code: "import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport type { FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\n\nexport interface RadioFieldProps<T extends FieldValues> extends React.ComponentProps<typeof RadioGroup> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  options: string[];\n  label?: string;\n  description?: string;\n}\n\nexport function RadioField<T extends FieldValues>({\n  register,\n  options,\n  label,\n  description,\n  ...props\n}: RadioFieldProps<T>) {\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => (\n        <FormItem className='space-y-1.5'>\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <RadioGroup\n              onValueChange={field.onChange}\n              defaultValue={field.value}\n              className='flex flex-col space-y-1'\n              {...props}\n            >\n              {options.map((value: any) => (\n                <FormItem key={value} className='flex items-center space-x-3 space-y-0'>\n                  <FormControl>\n                    <RadioGroupItem value={value} />\n                  </FormControl>\n                  <FormLabel className='font-normal'>{value}</FormLabel>\n                </FormItem>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className='sm:hidden text-xs text-left' />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/radio-field.tsx')),
  },
  'confirmation-dialog': {
    name: 'confirmation-dialog',
    path: '#/registry/ui/confirmation-dialog.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport type * as React from 'react';\n\nexport interface ConfirmationDialogProps extends React.RefAttributes<HTMLDialogElement> {\n  trigger?: React.ReactNode;\n  title?: string;\n  description?: string;\n  labelConfirmButton?: string;\n  onConfirm?: () => void;\n}\n\nexport function ConfirmationDialog({\n  trigger,\n  title,\n  description,\n  labelConfirmButton,\n  onConfirm,\n  ...props\n}: ConfirmationDialogProps) {\n  return (\n    <Dialog {...props}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription className='md:text-left'>{description}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button onClick={onConfirm}>{labelConfirmButton}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/confirmation-dialog.tsx')),
  },
  'address-field': {
    name: 'address-field',
    path: '#/registry/ui/address-field.tsx',
    code: "'use client';\n\nimport { getPlaceDetails, getPlacesAutocomplete } from '@/actions/shuip/places';\nimport { Command, CommandEmpty, CommandGroup, CommandItem, CommandList } from '@/components/ui/command';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\nimport { Loader2, MapPin } from 'lucide-react';\nimport * as React from 'react';\nimport { type FieldPath, type FieldValues, type UseFormRegisterReturn, useFormContext } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst DEFAULT_COUNTRY = 'US';\nconst LANGUAGE_RESULT = 'en';\nconst DEBOUNCE_TIME = 300;\n\nexport const addressSchema = z.object({\n  street: z.string().min(1, 'Street is required'),\n  city: z.string().min(1, 'City is required'),\n  postalCode: z.string().min(1, 'Postal code is required'),\n  country: z.string().min(1, 'Country is required'),\n  fullAddress: z.string().min(1, 'Address is required'),\n  placeId: z.string().optional(),\n});\n\nexport type AddressData = z.infer<typeof addressSchema>;\n\ninterface AddressSuggestion {\n  placeId: string;\n  description: string;\n  mainText: string;\n  secondaryText: string;\n  types: string[];\n}\n\ninterface AddressFieldProps extends React.ComponentProps<typeof Input> {\n  register: UseFormRegisterReturn<FieldPath<FieldValues>>;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  country?: string;\n}\n\nexport function AddressField({\n  register,\n  label = 'Address',\n  placeholder = 'Enter your address',\n  description,\n  country = DEFAULT_COUNTRY,\n  ...props\n}: AddressFieldProps) {\n  const [inputValue, setInputValue] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState<AddressSuggestion[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [showSuggestions, setShowSuggestions] = React.useState(false);\n  const [selectedIndex, setSelectedIndex] = React.useState(-1);\n  const debounceTimerRef = React.useRef<NodeJS.Timeout | null>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const popoverRef = React.useRef<HTMLDivElement>(null);\n  const form = useFormContext();\n\n  const searchAddresses = async (query: string) => {\n    if (!query || query.length < 3) {\n      setSuggestions([]);\n      setShowSuggestions(false);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await getPlacesAutocomplete({\n        input: query,\n        components: country ? `country:${country}` : undefined,\n        types: 'address',\n        language: LANGUAGE_RESULT,\n      });\n\n      if (result.error) {\n        throw new Error(result.error);\n      }\n\n      setSuggestions(result.predictions || []);\n      setShowSuggestions(result.predictions?.length > 0);\n      setSelectedIndex(-1);\n    } catch (error) {\n      console.error('Error searching addresses:', error);\n      setSuggestions([]);\n      setShowSuggestions(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    if (inputValue.length >= 3) {\n      debounceTimerRef.current = setTimeout(() => {\n        searchAddresses(inputValue);\n      }, DEBOUNCE_TIME);\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, [inputValue]);\n\n  const handleSelectAddress = async (suggestion: AddressSuggestion) => {\n    setInputValue(suggestion.description);\n    setShowSuggestions(false);\n    setSelectedIndex(-1);\n\n    const details = await getPlaceDetails({\n      placeId: suggestion.placeId,\n      fields: ['address_components', 'formatted_address', 'geometry'],\n      language: LANGUAGE_RESULT,\n    });\n\n    if (details?.result) {\n      const addressComponents = details.result.address_components || [];\n\n      let street = '';\n      let city = '';\n      let postalCode = '';\n      let country = '';\n\n      addressComponents.forEach((component: any) => {\n        const types = component.types;\n\n        if (types.includes('street_number')) {\n          street = `${component.long_name} ${street}`;\n        }\n        if (types.includes('route')) {\n          street = `${street} ${component.long_name}`;\n        }\n        if (types.includes('locality') || types.includes('administrative_area_level_2')) {\n          city = component.long_name;\n        }\n        if (types.includes('postal_code')) {\n          postalCode = component.long_name;\n        }\n        if (types.includes('country')) {\n          country = component.long_name;\n        }\n      });\n\n      form.setValue(`${name}.street`, street.trim());\n      form.setValue(`${name}.city`, city.trim());\n      form.setValue(`${name}.postalCode`, postalCode.trim());\n      form.setValue(`${name}.country`, country.trim());\n      form.setValue(`${name}.fullAddress`, details.result.formatted_address.trim());\n      form.setValue(`${name}.placeId`, suggestion.placeId.trim());\n    } else {\n      form.setValue(`${name}.fullAddress`, suggestion.description.trim());\n      form.setValue(`${name}.placeId`, suggestion.placeId.trim());\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev < suggestions.length - 1 ? prev + 1 : 0));\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev > 0 ? prev - 1 : suggestions.length - 1));\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0 && selectedIndex < suggestions.length) {\n          handleSelectAddress(suggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setShowSuggestions(false);\n        setSelectedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  const handleFocus = () => {\n    if (suggestions.length > 0 && inputValue.length >= 3) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent) => {\n    const relatedTarget = e.relatedTarget as HTMLElement;\n    if (popoverRef.current?.contains(relatedTarget)) {\n      return;\n    }\n\n    setTimeout(() => {\n      setShowSuggestions(false);\n      setSelectedIndex(-1);\n    }, 150);\n  };\n\n  return (\n    <FormField\n      {...register}\n      name={`${register.name}.fullAddress`}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className='flex items-center justify-between'>\n            {label}\n            <FormMessage className='max-sm:hidden text-xs opacity-80' />\n          </FormLabel>\n          <div className='relative'>\n            <Popover open={showSuggestions} onOpenChange={setShowSuggestions}>\n              <PopoverTrigger asChild>\n                <FormControl>\n                  <div className='relative'>\n                    <Input\n                      ref={inputRef}\n                      value={inputValue}\n                      placeholder={placeholder}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setInputValue(value);\n                        field.onChange(value);\n                      }}\n                      onFocus={handleFocus}\n                      onBlur={handleBlur}\n                      onKeyDown={handleKeyDown}\n                      autoComplete='off'\n                      {...props}\n                    />\n                    <div className='absolute inset-y-0 right-0 flex items-center pr-3'>\n                      {loading ? (\n                        <Loader2 className='size-4 animate-spin text-muted-foreground' />\n                      ) : (\n                        <MapPin className='size-4 text-muted-foreground' />\n                      )}\n                    </div>\n                  </div>\n                </FormControl>\n              </PopoverTrigger>\n              <PopoverContent\n                ref={popoverRef}\n                className='p-0'\n                align='start'\n                onOpenAutoFocus={(e) => e.preventDefault()}\n                style={{ width: inputRef.current?.offsetWidth }}\n              >\n                <Command className='w-full'>\n                  <CommandList className='max-h-60'>\n                    <CommandEmpty>{loading ? 'Searching...' : 'No addresses found'}</CommandEmpty>\n                    <CommandGroup>\n                      {suggestions.map((suggestion, index) => (\n                        <CommandItem\n                          key={suggestion.placeId}\n                          value={suggestion.description}\n                          onSelect={() => handleSelectAddress(suggestion)}\n                          className={cn(\n                            'flex items-start space-x-2 p-3 cursor-pointer',\n                            selectedIndex === index && 'bg-accent',\n                          )}\n                        >\n                          <MapPin className='size-4 mt-0.5 text-muted-foreground flex-shrink-0' />\n                          <div className='flex-1 min-w-0'>\n                            <div className='font-medium text-sm'>{suggestion.mainText}</div>\n                            <div className='text-xs text-muted-foreground truncate'>{suggestion.secondaryText}</div>\n                          </div>\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n          </div>\n          {description && <p className='text-sm text-muted-foreground'>{description}</p>}\n          <FormMessage className='sm:hidden text-xs text-left opacity-80' />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/address-field.tsx')),
  },
  'theme-button': {
    name: 'theme-button',
    path: '#/registry/ui/theme-button.tsx',
    code: "import { Button, type buttonVariants } from '@/components/ui/button';\nimport type { VariantProps } from 'class-variance-authority';\nimport { Laptop, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport * as React from 'react';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\ntype Theme = 'system' | 'light' | 'dark';\n\nexport interface ThemeButtonProps extends ButtonProps {\n  withText?: boolean;\n}\n\nexport function ThemeButton({ withText, ...props }: ThemeButtonProps) {\n  const { theme, setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<Theme>('system');\n\n  React.useEffect(() => {\n    setCurrentTheme(theme as Theme);\n  }, [theme]);\n\n  const cycleTheme = () => {\n    const themes: Theme[] = ['system', 'light', 'dark'];\n    const currentIndex = themes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    setTheme(themes[nextIndex]);\n  };\n\n  const getThemeIcon = () => {\n    switch (currentTheme) {\n      case 'system':\n        return <Laptop className='size-[1.2rem]' />;\n      case 'light':\n        return <Sun className='size-[1.2rem]' />;\n      case 'dark':\n        return <Moon className='size-[1.2rem]' />;\n    }\n  };\n\n  const getThemeText = () => {\n    return currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1);\n  };\n\n  return (\n    <Button variant='outline' size={withText ? 'default' : 'icon'} onClick={cycleTheme} {...props}>\n      {getThemeIcon()}\n      {withText && <span className='ml-2 capitalize'>{getThemeText()}</span>}\n      <span className='sr-only'>Toggle theme</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/theme-button.tsx')),
  },
  'select-field': {
    name: 'select-field',
    path: '#/registry/ui/select-field.tsx',
    code: "import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport type { SelectProps } from '@radix-ui/react-select';\nimport type { FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\n\n/**\n * Key is the label, value is the value\n * @example\n * const options: SelectFieldOption = {\n *   'First': '1',\n *   'Second': '2',\n *   'Third': '3',\n * };\n */\nexport type SelectFieldOption<T extends string = string> = Record<string, T>;\n\nexport interface SelectFieldProps<TFieldValues extends FieldValues> extends SelectProps {\n  register: UseFormRegisterReturn<FieldPath<TFieldValues>>;\n  options: SelectFieldOption;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  defaultValue?: TFieldValues[FieldPath<TFieldValues>];\n}\nexport function SelectField<TFieldValues extends FieldValues>({\n  register,\n  options,\n  label,\n  description,\n  placeholder,\n  defaultValue,\n  ...props\n}: SelectFieldProps<TFieldValues>) {\n  return (\n    <FormField\n      {...register}\n      defaultValue={defaultValue}\n      render={({ field }) => (\n        <FormItem>\n          {label && <FormLabel>{label}</FormLabel>}\n          <Select onValueChange={field.onChange} defaultValue={field.value} {...props}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {Object.entries(options).map(([label, value]) => (\n                <SelectItem key={label} value={value}>\n                  {label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/select-field.tsx')),
  },
  'hover-reveal': {
    name: 'hover-reveal',
    path: '#/registry/ui/hover-reveal.tsx',
    code: "import { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card';\nimport type * as React from 'react';\n\nexport interface HoverRevealProps extends React.RefAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport function HoverReveal({ children, content, ...props }: HoverRevealProps) {\n  return (\n    <HoverCard {...props}>\n      <HoverCardTrigger className='cursor-pointer'>{children}</HoverCardTrigger>\n      <HoverCardContent className='text-sm w-full'>{content}</HoverCardContent>\n    </HoverCard>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/hover-reveal.tsx')),
  },
  'title-section': {
    name: 'title-section',
    path: '#/registry/block/title-section.tsx',
    code: "import type * as React from 'react';\n\nexport interface TitleSectionProps extends React.RefAttributes<HTMLDivElement> {\n  title: string;\n  description: string | React.JSX.Element;\n}\n\nexport function TitleSection({ title, description, ...props }: TitleSectionProps) {\n  return (\n    <div className='text-center -space-y-2 my-6 max-md:text-sm' {...props}>\n      <h1 className='text-4xl md:text-5xl font-bold'>{title}</h1>\n      <p className='opacity-80 text-center'>{description}</p>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/block/title-section.tsx')),
  },
  'form-utils': {
    name: 'form-utils',
    path: '#/registry/lib/form-utils.ts',
    code: "import z from 'zod';\n\n/**\n * Get the changed fields between two objects\n * @param oldObject - The old object\n * @param newObject - The new object\n * @param options - Configuration options\n * @returns The changed fields\n * @example\n * getChangedFields({ a: 1 }, { a: 1 }) // { }\n * getChangedFields({ a: 1 }, { a: 2 }) // { a: 2 }\n * getChangedFields({ a: 1 }, { b: 1 }) // { a: undefined, b:1 }\n */\n\nexport function getChangedFields<T extends Record<string, unknown>>(\n  oldObject: T | null | undefined,\n  newObject: T | null | undefined,\n): Partial<T> {\n  const changedFields: Partial<T> = {};\n\n  if (!oldObject && !newObject) {\n    return changedFields;\n  }\n\n  if (!oldObject) {\n    return newObject ? { ...newObject } : changedFields;\n  }\n\n  if (!newObject) {\n    const result: Partial<T> = {};\n    Object.keys(oldObject).forEach((key) => {\n      result[key as keyof T] = undefined as T[keyof T];\n    });\n    return result;\n  }\n\n  const allKeys = new Set([...Object.keys(oldObject), ...Object.keys(newObject)]);\n\n  allKeys.forEach((key) => {\n    const typedKey = key as keyof T;\n    const oldValue = oldObject[typedKey];\n    const newValue = newObject[typedKey];\n\n    if (!isDeepEqual(oldValue, newValue)) {\n      changedFields[typedKey] = newValue;\n    }\n  });\n\n  return changedFields;\n}\n\n/**\n * Deep equality comparison helper function\n * @param a - The first value to compare\n * @param b - The second value to compare\n * @returns True if the values are deeply equal, false otherwise\n * @example\n * isDeepEqual(1, 1) // true\n * isDeepEqual(1, '1') // false\n * isDeepEqual({ a: 1 }, { a: 1 }) // true\n * isDeepEqual({ a: 1 }, { a: 2 }) // false\n * isDeepEqual([1, 2, 3], [1, 2, 3]) // true\n * isDeepEqual([1, 2, 3], [1, 2, 4]) // false\n */\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n\n  if (a == null || b == null) return a === b;\n  if (typeof a !== typeof b) return false;\n\n  if (typeof a !== 'object') return a === b;\n\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    return a.every((item, index) => isDeepEqual(item, b[index]));\n  }\n\n  const aObj = a as Record<string, unknown>;\n  const bObj = b as Record<string, unknown>;\n\n  const aKeys = Object.keys(aObj);\n  const bKeys = Object.keys(bObj);\n\n  if (aKeys.length !== bKeys.length) return false;\n\n  return aKeys.every((key) => bKeys.includes(key) && isDeepEqual(aObj[key], bObj[key]));\n}\n\n/**\n * Get the default values for a zod schema\n * @param schema - The zod schema\n * @param data - The data to use to get the default values\n * @returns The default values\n * @example\n * // Basic usage\n * getZodDefaultValues(z.object({ name: z.string() })) // { name: '' }\n *\n * // With nested objects\n * getZodDefaultValues(z.object({\n *   user: z.object({\n *     name: z.string(),\n *     age: z.number()\n *   })\n * })) // { user: { name: '', age: 0 } }\n *\n * // With provided data\n * getZodDefaultValues(\n *   z.object({ name: z.string(), age: z.number() }),\n *   { name: 'John' }\n * ) // { name: 'John', age: 0 }\n *\n */\nexport function getZodDefaultValues<T extends z.ZodObject<z.ZodRawShape>>(\n  schema: T,\n  data?: Partial<z.infer<T>>,\n): z.infer<T> {\n  return Object.keys(schema.shape).reduce<Record<string, unknown>>((acc, key) => {\n    acc[key] = data && data[key] !== undefined ? data[key] : zodTypeDefaultValue(schema.shape[key]);\n    return acc;\n  }, {});\n}\n\n/**\n * Get the default value for a zod type\n * @param key - The zod type\n * @returns The default value\n * @example\n * zodTypeDefaultValue(z.string()) // ''\n * zodTypeDefaultValue(z.number()) // 0\n * zodTypeDefaultValue(z.boolean()) // false\n * zodTypeDefaultValue(z.date()) // ''\n * zodTypeDefaultValue(z.array(z.string())) // []\n * zodTypeDefaultValue(z.object({ name: z.string() })) // { name: '' }\n */\nexport function zodTypeDefaultValue(key: z.ZodTypeAny): unknown {\n  switch (key.constructor) {\n    case z.ZodString:\n      return '';\n    case z.ZodNumber:\n      return 0;\n    case z.ZodBoolean:\n      return false;\n    case z.ZodDate:\n      return undefined;\n    case z.ZodArray:\n      return [];\n    case z.ZodObject: {\n      const objectSchema = key as z.ZodObject<z.ZodRawShape>;\n      return Object.keys(objectSchema.shape).reduce<Record<string, unknown>>((acc, fieldKey) => {\n        acc[fieldKey] = zodTypeDefaultValue(objectSchema.shape[fieldKey]);\n        return acc;\n      }, {});\n    }\n    case z.ZodEnum: {\n      return undefined;\n    }\n    case z.ZodNativeEnum: {\n      return undefined;\n    }\n    case z.ZodOptional:\n      return undefined;\n    case z.ZodNullable:\n      return null;\n    default:\n      return undefined;\n  }\n}\n",
    component: React.lazy(() => import('#/registry/lib/form-utils.ts')),
  },
  'input-field.example': {
    name: 'input-field.example',
    path: '#/registry/examples/input-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  name: z.string().nonempty({ message: 'Name is required' }),\n});\n\nexport default function InputFieldExample() {\n  const form = useForm({\n    defaultValues: { name: '' },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Hello ${values.name}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <InputField register={form.register('name')} label='Name' description='Your name' placeholder='John' />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/input-field.tsx')),
  },
  'submit-button.loading.example': {
    name: 'submit-button.loading.example',
    path: '#/registry/examples/submit-button.loading.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonLoadingExample() {\n  return <SubmitButton loading={true}>Submit</SubmitButton>;\n}\n",
    component: React.lazy(() => import('#/registry/examples/submit-button.loading.tsx')),
  },
  'submit-button.example': {
    name: 'submit-button.example',
    path: '#/registry/examples/submit-button.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonExample() {\n  return <SubmitButton>Submit</SubmitButton>;\n}\n",
    component: React.lazy(() => import('#/registry/examples/submit-button.tsx')),
  },
  'title-section.example': {
    name: 'title-section.example',
    path: '#/registry/examples/title-section.tsx',
    code: "import { TitleSection } from '@/components/block/shuip/title-section';\n\nexport default function TitleSectionExample() {\n  return <TitleSection title='Title' description='Lorem ipsum dolor sit amet consectetur, adipisicing elit.' />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/title-section.tsx')),
  },
  'query-boundary.example': {
    name: 'query-boundary.example',
    path: '#/registry/examples/query-boundary.tsx',
    code: "'use client';\n\nimport { QueryBoundary } from '@/components/ui/shuip/query-boundary';\nimport { LoaderCircle } from 'lucide-react';\n\nexport default function QueryBoundaryExample() {\n  const queryKeys = ['data', Math.random().toString(36).substring(2, 15)];\n  return (\n    <div className='flex flex-col items-center justify-center gap-4'>\n      <QueryBoundary queryKeys={queryKeys} loadingFallback={<LoaderCircle className='animate-spin' />}>\n        <DataComponent />\n      </QueryBoundary>\n    </div>\n  );\n}\n\nasync function DataComponent() {\n  const isError = Math.random() > 0.5;\n\n  const getData = async () => {\n    await new Promise((resolve) => setTimeout(resolve, 3000));\n    if (isError) {\n      throw new Error('Error in DataComponent');\n    }\n    return { data: 'DataComponent' };\n  };\n\n  const data = await getData();\n\n  return (\n    <div className='flex flex-col items-center justify-center gap-4'>\n      DataComponent: <pre>{JSON.stringify(data, null, 2)}</pre>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/query-boundary.tsx')),
  },
  'copy-button.with-custom-icons.example': {
    name: 'copy-button.with-custom-icons.example',
    path: '#/registry/examples/copy-button.with-custom-icons.tsx',
    code: "'use client';\n\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\nimport { Cat, Dog } from 'lucide-react';\n\nexport default function CopyButtonWithCustomIconsExample() {\n  return (\n    <CopyButton\n      value='Hello, cat!'\n      copiedIcon={<Dog className='size-6' />}\n      notCopiedIcon={<Cat className='size-6' />}\n      className='size-8'\n      variant={'default'}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/copy-button.with-custom-icons.tsx')),
  },
  'form-utils.example': {
    name: 'form-utils.example',
    path: '#/registry/examples/form-utils.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/input-field';\nimport { RadioField } from '@/components/ui/shuip/radio-field';\nimport { SelectField } from '@/components/ui/shuip/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { getChangedFields, getZodDefaultValues } from '@/lib/shuip/form-utils';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n  createdAt: z.date().optional(),\n  address: z.object({\n    street: z.string().optional(),\n    city: z.string().optional(),\n    state: z.string().optional(),\n    zip: z.number().optional(),\n  }),\n  role: z.enum(['admin', 'user']).optional(),\n  status: z.enum(['ACTIVE', 'INACTIVE']).optional(),\n});\n\ntype MyZodSchema = z.infer<typeof zodSchema>;\n\nexport default function FormUtilsExample() {\n  const [changedFields, setChangedFields] = React.useState<Partial<MyZodSchema>>();\n\n  const form = useForm<z.infer<typeof zodSchema>>({\n    resolver: zodResolver(zodSchema),\n    defaultValues: getZodDefaultValues(zodSchema, {\n      name: 'John Doe',\n      age: 25,\n      status: 'INACTIVE',\n    }),\n  });\n\n  const handleSubmit = (data: MyZodSchema) => {\n    const changed = getChangedFields(form.formState.defaultValues, data);\n    setChangedFields(changed as Partial<MyZodSchema>);\n    form.reset(data);\n  };\n\n  return (\n    <div className='space-y-4 w-full'>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className='grid lg:grid-cols-2 gap-4'>\n          <InputField register={form.register('name')} label='name' placeholder='Your Name' />\n          <InputField register={form.register('age')} type='number' name='age' label='age' placeholder='Your Age' />\n          <RadioField register={form.register('role')} label='role' options={['admin', 'user']} />\n          <SelectField\n            register={form.register('status')}\n            label='status'\n            options={{\n              active: 'ACTIVE',\n              inactive: 'INACTIVE',\n            }}\n          />\n          <InputField\n            register={form.register('createdAt')}\n            type='date'\n            name='createdAt'\n            label='createdAt'\n            placeholder='Your Created At'\n          />\n          <InputField register={form.register('address.street')} label='address.street' placeholder='Your Street' />\n          <InputField register={form.register('address.city')} label='address.city' placeholder='Your City' />\n          <InputField register={form.register('address.zip')} label='address.zip' placeholder='Your Zip' />\n          <InputField register={form.register('address.state')} label='address.state' placeholder='Your State' />\n\n          <SubmitButton\n            className='lg:col-span-2'\n            loading={form.formState.isSubmitting}\n            disabled={!form.formState.isDirty}\n          >\n            Submit\n          </SubmitButton>\n        </form>\n      </Form>\n      <div className='grid lg:grid-cols-2 gap-4'>\n        <pre className='border border-primary rounded-md p-4'>\n          <h3 className='text-primary'>Form Values</h3>\n          {JSON.stringify(form.getValues(), null, 2)}\n        </pre>\n        <pre className='border border-primary rounded-md p-4'>\n          <h3 className='text-primary'>Changed Fields</h3>\n          {JSON.stringify(changedFields, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/form-utils.tsx')),
  },
  'copy-button.example': {
    name: 'copy-button.example',
    path: '#/registry/examples/copy-button.tsx',
    code: "'use client';\n\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\n\nexport default function CopyButtonExample() {\n  return <CopyButton value='Hello, world!' />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/copy-button.tsx')),
  },
  'radio-field.example': {
    name: 'radio-field.example',
    path: '#/registry/examples/radio-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { RadioField } from '@/components/ui/shuip/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  selection: z.enum(['Yes', 'No', 'Maybe', 'Not sure']),\n});\n\nexport default function RadioFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: 'Yes' as const,\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <RadioField\n          register={form.register('selection')}\n          options={['Yes', 'No', 'Maybe', 'Not sure']}\n          label='Are you sure?'\n          description='This is a description'\n        />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/radio-field.tsx')),
  },
  'confirmation-dialog.example': {
    name: 'confirmation-dialog.example',
    path: '#/registry/examples/confirmation-dialog.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport { ConfirmationDialog } from '@/components/ui/shuip/confirmation-dialog';\n\nexport default function ConfirmationDialogExample() {\n  return (\n    <ConfirmationDialog\n      trigger={<Button>Open confirmation dialog</Button>}\n      title='Confirmation Dialog'\n      description='Are you sure you want to make this action?'\n      labelConfirmButton='Make it'\n      onConfirm={() => alert('Confirmed')}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/confirmation-dialog.tsx')),
  },
  'address-field.example': {
    name: 'address-field.example',
    path: '#/registry/examples/address-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { AddressField, addressSchema } from '@/components/ui/shuip/address-field';\nimport { InputField } from '@/components/ui/shuip/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  name: z.string(),\n  address: addressSchema,\n});\n\nexport default function AddressFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      name: 'John Doe',\n      address: {\n        street: '',\n        city: '',\n        postalCode: '',\n        country: '',\n        fullAddress: '',\n        placeId: '',\n      },\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Values: ${JSON.stringify(values, null, 2)}`);\n      form.reset();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4 w-full'>\n        <InputField register={form.register('name')} label='Name' placeholder='Enter your name' />\n        <AddressField register={form.register('address')} placeholder='Enter your address' className='w-full' />\n        <SubmitButton>Check</SubmitButton>\n\n        <pre className='border border-primary rounded-md p-4 overflow-x-auto'>\n          <h3 className='text-primary'>Form values</h3>\n          <pre>{JSON.stringify(form.watch(), null, 2)}</pre>\n        </pre>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/address-field.tsx')),
  },
  'theme-button.text.example': {
    name: 'theme-button.text.example',
    path: '#/registry/examples/theme-button.text.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonTextExample() {\n  return <ThemeButton withText />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/theme-button.text.tsx')),
  },
  'theme-button.example': {
    name: 'theme-button.example',
    path: '#/registry/examples/theme-button.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonExample() {\n  return <ThemeButton />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/theme-button.tsx')),
  },
  'select-field.example': {
    name: 'select-field.example',
    path: '#/registry/examples/select-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { SelectField, type SelectFieldOption } from '@/components/ui/shuip/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst options: SelectFieldOption = {\n  First: '1',\n  Second: '2',\n  Third: '3',\n  Fourth: '4',\n};\n\nconst zodSchema = z.object({\n  selection: z.enum(Object.values(options) as [string]),\n});\n\nexport default function SelectFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: '1',\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <SelectField\n          register={form.register('selection')}\n          placeholder='Select an option'\n          label='selection'\n          options={options}\n          defaultValue={'3'}\n        />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/select-field.tsx')),
  },
  'hover-reveal.example': {
    name: 'hover-reveal.example',
    path: '#/registry/examples/hover-reveal.tsx',
    code: "import { HoverReveal } from '@/components/ui/shuip/hover-reveal';\n\nexport default function HoverRevealExample() {\n  return <HoverReveal content={'Description'}>Hover me</HoverReveal>;\n}\n",
    component: React.lazy(() => import('#/registry/examples/hover-reveal.tsx')),
  },
};
/**
 * registry/(ui|block): registry/examples[]
 */
export const COMPONENT_CATEGORIES: Record<string, string[]> = {
  'input-field': ['input-field.example'],
  'submit-button': ['submit-button.loading.example', 'submit-button.example'],
  'query-boundary': ['query-boundary.example'],
  'copy-button': ['copy-button.with-custom-icons.example', 'copy-button.example'],
  'radio-field': ['radio-field.example'],
  'confirmation-dialog': ['confirmation-dialog.example'],
  'address-field': ['address-field.example'],
  'theme-button': ['theme-button.text.example', 'theme-button.example'],
  'select-field': ['select-field.example'],
  'hover-reveal': ['hover-reveal.example'],
  'title-section': ['title-section.example'],
  'form-utils': ['form-utils.example'],
};
