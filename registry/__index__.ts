// @ts-nocheck
// This file is autogenerated by scripts/build-registry.ts
// Do not edit this file directly.
import * as React from 'react';

interface RegistryComponent {
  name: string;
  category: string;
  path: string;
  code: string;
  component: any;
}

export const registryIndex: Record<string, RegistryComponent> = {
  'button.signout': {
    name: 'button.signout',
    category: 'button',
    path: '#/registry/ui/button.signout.tsx',
    code: "'use client';\n\n// import { signOut } from \"next-auth/react\";\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport { DialogConfirmation } from './dialog.confirmation';\n\nexport interface ButtonSignoutProps {\n  withLogo: boolean;\n  onConfirm: () => void;\n}\n\nexport default function ButtonSignout({ withLogo, onConfirm }: ButtonSignoutProps) {\n  return (\n    <DialogConfirmation\n      trigger={\n        <Button variant=\"outline\" className=\"text-destructive\" size={withLogo ? 'icon' : 'default'}>\n          {withLogo ? <LogOut /> : 'Sign out'}\n        </Button>\n      }\n      title=\"Sign out\"\n      description=\"Are you sure you want to sign out?\"\n      labelConfirmButton=\"Sign out\"\n      onConfirm={() => onConfirm}\n      //   onConfirm={() => signOut()}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/button.signout.tsx')),
  },
  'input.form-field': {
    name: 'input.form-field',
    category: 'input',
    path: '#/registry/ui/input.form-field.tsx',
    code: "'use client';\n\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport type { Control, Path } from 'react-hook-form';\n\nexport interface InputFieldProps<TFieldValues extends Record<string, string>> {\n  control: Control<TFieldValues>;\n  name: Path<TFieldValues>;\n  label: string;\n  description?: string;\n}\n\nconst InputField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  label,\n  description,\n  ...props\n}: InputFieldProps<TFieldValues> & React.ComponentProps<typeof Input>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => {\n        if (!field) {\n          console.error('Field is missing for InputField', name);\n          return <></>;\n        }\n\n        return (\n          <FormItem className=\"space-y-1.5\">\n            <FormLabel className=\"flex items-center justify-between\">\n              {label}\n              <FormMessage className=\"max-sm:hidden text-sm\" />\n            </FormLabel>\n            <FormControl>\n              <Input {...field} {...props} />\n            </FormControl>\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage className=\"sm:hidden text-xs text-left\" />\n          </FormItem>\n        );\n      }}\n    />\n  );\n};\n\nexport default InputField;\n",
    component: React.lazy(() => import('#/registry/ui/input.form-field.tsx')),
  },
  'button.theme': {
    name: 'button.theme',
    category: 'button',
    path: '#/registry/ui/button.theme.tsx',
    code: "'use client';\n\nimport * as React from 'react';\nimport { Laptop, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { Button } from '@/components/ui/button';\n\nexport interface ButtonThemeProps {\n  withText?: boolean;\n}\n\nexport default function ButtonTheme({ withText }: ButtonThemeProps) {\n  const { theme, setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<'system' | 'light' | 'dark'>('system');\n\n  React.useEffect(() => {\n    setCurrentTheme(theme as 'system' | 'light' | 'dark');\n  }, [theme]);\n\n  const cycleTheme = () => {\n    const themes: ('system' | 'light' | 'dark')[] = ['system', 'light', 'dark'];\n    const currentIndex = themes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    setTheme(themes[nextIndex]);\n  };\n\n  return (\n    <Button variant=\"outline\" size={withText ? 'default' : 'icon'} onClick={cycleTheme}>\n      {currentTheme === 'system' && <Laptop className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {currentTheme === 'light' && <Sun className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {currentTheme === 'dark' && <Moon className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {withText && (\n        <span className=\"ml-2 capitalize\">{currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1)}</span>\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/button.theme.tsx')),
  },
  'button.submit': {
    name: 'button.submit',
    category: 'button',
    path: '#/registry/ui/button.submit.tsx',
    code: "import { ReloadIcon } from '@radix-ui/react-icons';\nimport { Button } from '@/components/ui/button';\nimport type { JSX, MouseEventHandler } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ButtonSubmitProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  label: JSX.Element | string;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nexport default function ButtonSubmit({\n  onClick,\n  label,\n  disabled,\n  loading,\n  ...props\n}: ButtonSubmitProps & React.ComponentProps<'button'>) {\n  return (\n    <Button\n      type=\"submit\"\n      variant={'default'}\n      onClick={onClick}\n      disabled={disabled || loading}\n      className={cn('w-full', ...(props?.className ? [props.className] : []))}\n      {...props}\n    >\n      {loading && <ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />}\n      {label}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/button.submit.tsx')),
  },
  'radio.form-field': {
    name: 'radio.form-field',
    category: 'radio',
    path: '#/registry/ui/radio.form-field.tsx',
    code: 'import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \'@/components/ui/form\';\nimport type { Control, Path } from \'react-hook-form\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\n\nconst RadioField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  label,\n  description,\n  values,\n}: {\n  control: Control<TFieldValues>;\n  name: Path<TFieldValues>;\n  label: string;\n  description?: string;\n  values: string[];\n} & React.ComponentProps<typeof RadioGroup>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className="space-y-1.5">\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex flex-col space-y-1">\n              {values.map((value: any) => (\n                <FormItem key={value} className="flex items-center space-x-3 space-y-0">\n                  <FormControl>\n                    <RadioGroupItem value={value} />\n                  </FormControl>\n                  <FormLabel className="font-normal">{value}</FormLabel>\n                </FormItem>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className="sm:hidden text-xs text-left" />\n        </FormItem>\n      )}\n    />\n  );\n};\n\nexport default RadioField;\n',
    component: React.lazy(() => import('#/registry/ui/radio.form-field.tsx')),
  },
  'select.form-field': {
    name: 'select.form-field',
    category: 'select',
    path: '#/registry/ui/select.form-field.tsx',
    code: "'use client';\n\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Control, Path, PathValue } from 'react-hook-form';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectFieldProps<T extends Record<string, string>> {\n  control: Control<T>;\n  name: Path<T>;\n  values: SelectOption[];\n  defaultValues?: PathValue<T, Path<T>>;\n  label: string;\n  placeholder: string;\n  description?: string;\n}\n\nexport const SelectField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  values,\n  defaultValues,\n  label,\n  placeholder,\n  description,\n}: SelectFieldProps<TFieldValues>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      defaultValue={defaultValues}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <Select onValueChange={field.onChange} defaultValue={field.value}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {values.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
    component: React.lazy(() => import('#/registry/ui/select.form-field.tsx')),
  },
  'div.title-section': {
    name: 'div.title-section',
    category: 'div',
    path: '#/registry/ui/div.title-section.tsx',
    code: '\'use client\';\n\nimport type { JSX } from \'react\';\n\nexport interface TitleSectionProps {\n  title: string;\n  description: string | JSX.Element;\n}\n\nexport default function TitleSection({ title, description }: TitleSectionProps) {\n  return (\n    <div className="text-center -space-y-2 my-6 max-md:text-sm">\n      <h1 className="text-4xl md:text-5xl font-bold">{title}</h1>\n      <p className="opacity-80 text-center">{description}</p>\n    </div>\n  );\n}\n',
    component: React.lazy(() => import('#/registry/ui/div.title-section.tsx')),
  },
  'skeleton.text': {
    name: 'skeleton.text',
    category: 'skeleton',
    path: '#/registry/ui/skeleton.text.tsx',
    code: "'use client';\n\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport interface SkeletonTextProps {\n  text: string | undefined;\n}\n\nexport const SkeletonText = ({ text }: SkeletonTextProps) => {\n  if (!text) return <Skeleton className=\"w-20 h-4\" />;\n  return text;\n};\n",
    component: React.lazy(() => import('#/registry/ui/skeleton.text.tsx')),
  },
  'hover.item': {
    name: 'hover.item',
    category: 'hover',
    path: '#/registry/ui/hover.item.tsx',
    code: 'import type React from \'react\';\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from \'@/components/ui/hover-card\';\n\nexport interface HoverItemProps {\n  children: string | React.JSX.Element | React.ReactNode; // can be used as children\n  content: string | React.JSX.Element;\n}\n\nexport default function HoverItem({ children, content }: HoverItemProps) {\n  return (\n    <HoverCard>\n      <HoverCardTrigger className="cursor-pointer">{children}</HoverCardTrigger>\n      <HoverCardContent className="text-sm w-full">{content}</HoverCardContent>\n    </HoverCard>\n  );\n}\n',
    component: React.lazy(() => import('#/registry/ui/hover.item.tsx')),
  },
  'dialog.confirmation': {
    name: 'dialog.confirmation',
    category: 'dialog',
    path: '#/registry/ui/dialog.confirmation.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport type { JSX } from 'react';\n\nexport interface DialogConfirmationProps {\n  trigger: JSX.Element;\n  title: string;\n  description: string;\n  labelConfirmButton: string;\n  onConfirm: () => void;\n}\n\nexport function DialogConfirmation({\n  trigger,\n  title,\n  description,\n  labelConfirmButton,\n  onConfirm,\n}: DialogConfirmationProps) {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription className=\"md:text-left\">{description}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button onClick={onConfirm}>{labelConfirmButton}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/dialog.confirmation.tsx')),
  },
  'button.submit.loading.example': {
    name: 'button.submit.loading.example',
    category: 'button',
    path: '#/registry/examples/button.submit.loading.tsx',
    code: "import ButtonSubmit from '../ui/button.submit';\n\nexport default function ButtonSubmitLoadingExample() {\n  return (\n    <ButtonSubmit\n      onClick={() => alert('Button clicked')}\n      label=\"Submit\"\n      loading={true}\n      // disabled\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/button.submit.loading.tsx')),
  },
  'button.signout.example': {
    name: 'button.signout.example',
    category: 'button',
    path: '#/registry/examples/button.signout.tsx',
    code: "'use client';\n\nimport ButtonSignout from '../ui/button.signout';\n\nexport default function ButtonSignoutExample() {\n  return <ButtonSignout withLogo onConfirm={() => alert('Signout!')} />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/button.signout.tsx')),
  },
  'input.form-field.example': {
    name: 'input.form-field.example',
    category: 'input',
    path: '#/registry/examples/input.form-field.tsx',
    code: "'use client';\n\nimport { Input } from '@/components/ui/input';\nimport { useForm, type Control, type Path } from 'react-hook-form';\nimport InputField from '../ui/input.form-field';\n\nexport default function InputFieldExample() {\n  const {} = useForm();\n  // TODO with shext\n\n  return (\n    <></>\n    // <InputField\n    //   control={control}\n    //   name=\"name\"\n    //   label=\"Name\"\n    //   description=\"\n\n    // />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/input.form-field.tsx')),
  },
  'button.theme.example': {
    name: 'button.theme.example',
    category: 'button',
    path: '#/registry/examples/button.theme.tsx',
    code: "'use client';\n\nimport ButtonTheme from '../ui/button.theme';\n\nexport default function ButtonThemeExample() {\n  return <ButtonTheme withText />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/button.theme.tsx')),
  },
  'button.submit.example': {
    name: 'button.submit.example',
    category: 'button',
    path: '#/registry/examples/button.submit.tsx',
    code: "import ButtonSubmit from '../ui/button.submit';\n\nexport default function ButtonSubmitExample() {\n  return <ButtonSubmit onClick={() => alert('Button clicked')} label=\"Submit\" />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/button.submit.tsx')),
  },
  'radio.form-field.example': {
    name: 'radio.form-field.example',
    category: 'radio',
    path: '#/registry/examples/radio.form-field.tsx',
    code: 'import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \'@/components/ui/form\';\nimport type { Control, Path } from \'react-hook-form\';\nimport { RadioGroup, RadioGroupItem } from \'@/components/ui/radio-group\';\n\nconst RadioField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  label,\n  description,\n  values,\n}: {\n  control: Control<TFieldValues>;\n  name: Path<TFieldValues>;\n  label: string;\n  description?: string;\n  values: string[];\n} & React.ComponentProps<typeof RadioGroup>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className="space-y-1.5">\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <RadioGroup onValueChange={field.onChange} defaultValue={field.value} className="flex flex-col space-y-1">\n              {values.map((value: any) => (\n                <FormItem key={value} className="flex items-center space-x-3 space-y-0">\n                  <FormControl>\n                    <RadioGroupItem value={value} />\n                  </FormControl>\n                  <FormLabel className="font-normal">{value}</FormLabel>\n                </FormItem>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className="sm:hidden text-xs text-left" />\n        </FormItem>\n      )}\n    />\n  );\n};\n\nexport default RadioField;\n',
    component: React.lazy(() => import('#/registry/examples/radio.form-field.tsx')),
  },
  'select.form-field.example': {
    name: 'select.form-field.example',
    category: 'select',
    path: '#/registry/examples/select.form-field.tsx',
    code: "'use client';\n\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Control, Path, PathValue } from 'react-hook-form';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectFieldProps<T extends Record<string, string>> {\n  control: Control<T>;\n  name: Path<T>;\n  values: SelectOption[];\n  defaultValues?: PathValue<T, Path<T>>;\n  label: string;\n  placeholder: string;\n  description?: string;\n}\n\nexport const SelectField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  values,\n  defaultValues,\n  label,\n  placeholder,\n  description,\n}: SelectFieldProps<TFieldValues>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      defaultValue={defaultValues}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <Select onValueChange={field.onChange} defaultValue={field.value}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {values.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
    component: React.lazy(() => import('#/registry/examples/select.form-field.tsx')),
  },
  'div.title-section.example': {
    name: 'div.title-section.example',
    category: 'div',
    path: '#/registry/examples/div.title-section.tsx',
    code: "'use client';\n\nimport type { JSX } from 'react';\nimport TitleSection from '../ui/div.title-section';\n\nexport interface TitleSectionProps {\n  title: string;\n  description: string | JSX.Element;\n}\n\nexport default function TitleSectionExample() {\n  return <TitleSection title=\"Title\" description=\"Lorem ipsum dolor sit amet consectetur, adipisicing elit.\" />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/div.title-section.tsx')),
  },
  'skeleton.text.example': {
    name: 'skeleton.text.example',
    category: 'skeleton',
    path: '#/registry/examples/skeleton.text.tsx',
    code: 'import { SkeletonText } from \'../ui/skeleton.text\';\n\nexport interface SkeletonTextProps {\n  text: string | undefined;\n}\n\nexport default function SkeletonTextExample() {\n  return <SkeletonText text="Hello" />;\n}\n',
    component: React.lazy(() => import('#/registry/examples/skeleton.text.tsx')),
  },
  'hover.item.example': {
    name: 'hover.item.example',
    category: 'hover',
    path: '#/registry/examples/hover.item.tsx',
    code: "import type React from 'react';\nimport HoverItem from '../ui/hover.item';\n\nexport default function HoverItemExample() {\n  return <HoverItem content={'Description'}>Hover me</HoverItem>;\n}\n",
    component: React.lazy(() => import('#/registry/examples/hover.item.tsx')),
  },
  'dialog.confirmation.example': {
    name: 'dialog.confirmation.example',
    category: 'dialog',
    path: '#/registry/examples/dialog.confirmation.tsx',
    code: 'import { Button } from \'@/components/ui/button\';\nimport { DialogConfirmation } from \'../ui/dialog.confirmation\';\n\nexport function DialogConfirmationExample() {\n  return (\n    <DialogConfirmation\n      trigger={<Button>Open confirmation dialog</Button>}\n      title="Confirmation Dialog"\n      description="Are you sure you want to make this action?"\n      labelConfirmButton="Make it"\n      onConfirm={() => alert(\'Confirmed\')}\n    />\n  );\n}\n',
    component: React.lazy(() => import('#/registry/examples/dialog.confirmation.tsx')),
  },
};
/**
 * [category]: { [key: registry/ui]: [key: registry/examples][] }
 * TODO: Need to improve this structure
 */
export const COMPONENT_CATEGORIES: Record<string, Record<string, string[]>> = {
  button: {
    'button.signout': ['button.signout'],
    'button.theme': ['button.theme'],
    'button.submit': ['button.submit.loading', 'button.submit'],
  },
  input: {
    'input.form-field': ['input.form-field'],
  },
  radio: {
    'radio.form-field': ['radio.form-field'],
  },
  select: {
    'select.form-field': ['select.form-field'],
  },
  div: {
    'div.title-section': ['div.title-section'],
  },
  skeleton: {
    'skeleton.text': ['skeleton.text'],
  },
  hover: {
    'hover.item': ['hover.item'],
  },
  dialog: {
    'dialog.confirmation': ['dialog.confirmation'],
  },
};
