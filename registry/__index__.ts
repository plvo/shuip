// @ts-nocheck

/**
 * This file is autogenerated by @link https://github.com/plvo/shuip/blob/main/scripts/generate-registry.ts
 * Do not edit this file directly.
 */

import * as React from 'react';

interface RegistryComponent {
  name: string;
  path: string;
  code: string;
  component: any;
}

export const registryIndex: Record<string, RegistryComponent> = {
  'input-field': {
    name: 'input-field',
    path: '#/registry/ui/input-field.tsx',
    code: "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Eye, EyeOff } from 'lucide-react';\nimport * as React from 'react';\nimport type { Control, ControllerRenderProps, Path } from 'react-hook-form';\n\nexport interface InputFieldProps<T extends Record<string, any>> extends React.ComponentProps<typeof Input> {\n  control: Control<T>;\n  name: Path<T>;\n  label: string;\n  description?: string;\n  isNumber?: boolean;\n}\n\nexport function InputField<TFieldValues extends Record<string, any>>({\n  control,\n  name,\n  label,\n  description,\n  isNumber = false,\n  ...props\n}: InputFieldProps<TFieldValues>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const getInputType = () => {\n    if (isNumber) return 'number';\n    if (props.type === 'password') {\n      return showPassword ? 'text' : 'password';\n    }\n    return props.type ?? 'text';\n  };\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    field: ControllerRenderProps<TFieldValues, Path<TFieldValues>>,\n  ) => {\n    const value = e.target.value;\n    if (isNumber) return field.onChange(value === '' ? '' : Number(value));\n    return field.onChange(value);\n  };\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => {\n        return (\n          <FormItem className='space-y-1.5'>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-sm' />\n            </FormLabel>\n            <FormControl>\n              <div className='relative'>\n                <Input {...field} {...props} type={getInputType()} onChange={(e) => onChange(e, field)} />\n                {props.type === 'password' && (\n                  <Button\n                    type='button'\n                    variant='ghost'\n                    size='sm'\n                    className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n                    onClick={() => setShowPassword((prev) => !prev)}\n                    tabIndex={-1}\n                    aria-label={showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe'}\n                  >\n                    {showPassword ? (\n                      <EyeOff className='h-4 w-4' aria-hidden='true' />\n                    ) : (\n                      <Eye className='h-4 w-4' aria-hidden='true' />\n                    )}\n                    <span className='sr-only'>\n                      {showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe'}\n                    </span>\n                  </Button>\n                )}\n              </div>\n            </FormControl>\n            {description && <p className='text-muted-foreground text-sm'>{description}</p>}\n            <FormMessage className='sm:hidden text-xs text-left' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/input-field.tsx')),
  },
  'submit-button': {
    name: 'submit-button',
    path: '#/registry/ui/submit-button.tsx',
    code: "import { Button, type buttonVariants } from '@/components/ui/button';\nimport { ReloadIcon } from '@radix-ui/react-icons';\nimport type { VariantProps } from 'class-variance-authority';\nimport type * as React from 'react';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface SubmitButtonProps extends ButtonProps {\n  label?: React.JSX.Element | string;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: React.JSX.Element;\n}\n\nexport function SubmitButton({\n  label,\n  disabled,\n  loading,\n  icon = <ReloadIcon className='mr-2 size-4 animate-spin' />,\n  ...props\n}: SubmitButtonProps) {\n  return (\n    <Button type='submit' variant={'default'} className={'w-full'} disabled={disabled || loading} {...props}>\n      {loading && icon}\n      {label}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/submit-button.tsx')),
  },
  'copy-button': {
    name: 'copy-button',
    path: '#/registry/ui/copy-button.tsx',
    code: "'use client';\n\nimport { Button, type buttonVariants } from '@/components/ui/button';\nimport type { VariantProps } from 'class-variance-authority';\nimport { CheckIcon, Copy } from 'lucide-react';\nimport * as React from 'react';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface CopyButtonProps extends ButtonProps {\n  value: string;\n  copiedIcon?: React.ReactNode;\n  notCopiedIcon?: React.ReactNode;\n}\n\nasync function copyToClipboardWithMeta(value: string) {\n  navigator.clipboard.writeText(value);\n}\n\nexport function CopyButton({ value, copiedIcon = <CheckIcon />, notCopiedIcon = <Copy />, ...props }: CopyButtonProps) {\n  const [hasCopied, setHasCopied] = React.useState(false);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false);\n    }, 2000);\n  }, [hasCopied]);\n\n  return (\n    <Button\n      size='icon'\n      variant={'ghost'}\n      className={'z-10 size-4'}\n      onClick={() => {\n        copyToClipboardWithMeta(value);\n        setHasCopied(true);\n      }}\n      {...props}\n    >\n      <span className='sr-only'>Copy</span>\n      {hasCopied ? copiedIcon : notCopiedIcon}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/copy-button.tsx')),
  },
  'radio-field': {
    name: 'radio-field',
    path: '#/registry/ui/radio-field.tsx',
    code: "import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport type { Control, Path } from 'react-hook-form';\n\nexport interface RadioFieldProps<T extends Record<string, string>> extends React.ComponentProps<typeof RadioGroup> {\n  control: Control<T>;\n  name: Path<T>;\n  label: string;\n  description?: string;\n  values: string[];\n}\n\nexport function RadioField<TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  label,\n  description,\n  values,\n  ...props\n}: RadioFieldProps<TFieldValues>) {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className='space-y-1.5'>\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <RadioGroup\n              onValueChange={field.onChange}\n              defaultValue={field.value}\n              className='flex flex-col space-y-1'\n              {...props}\n            >\n              {values.map((value: any) => (\n                <FormItem key={value} className='flex items-center space-x-3 space-y-0'>\n                  <FormControl>\n                    <RadioGroupItem value={value} />\n                  </FormControl>\n                  <FormLabel className='font-normal'>{value}</FormLabel>\n                </FormItem>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className='sm:hidden text-xs text-left' />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/radio-field.tsx')),
  },
  'confirmation-dialog': {
    name: 'confirmation-dialog',
    path: '#/registry/ui/confirmation-dialog.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport type * as React from 'react';\n\nexport interface ConfirmationDialogProps extends React.RefAttributes<HTMLDialogElement> {\n  trigger: React.JSX.Element;\n  title: string;\n  description: string;\n  labelConfirmButton: string;\n  onConfirm: () => void;\n}\n\nexport function ConfirmationDialog({\n  trigger,\n  title,\n  description,\n  labelConfirmButton,\n  onConfirm,\n  ...props\n}: ConfirmationDialogProps) {\n  return (\n    <Dialog {...props}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription className='md:text-left'>{description}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button onClick={onConfirm}>{labelConfirmButton}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/confirmation-dialog.tsx')),
  },
  'theme-button': {
    name: 'theme-button',
    path: '#/registry/ui/theme-button.tsx',
    code: "import { Button, type buttonVariants } from '@/components/ui/button';\nimport type { VariantProps } from 'class-variance-authority';\nimport { Laptop, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport * as React from 'react';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\ntype Theme = 'system' | 'light' | 'dark';\n\nexport interface ThemeButtonProps extends ButtonProps {\n  withText?: boolean;\n}\n\nexport function ThemeButton({ withText, ...props }: ThemeButtonProps) {\n  const { theme, setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<Theme>('system');\n\n  React.useEffect(() => {\n    setCurrentTheme(theme as Theme);\n  }, [theme]);\n\n  const cycleTheme = () => {\n    const themes: Theme[] = ['system', 'light', 'dark'];\n    const currentIndex = themes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    setTheme(themes[nextIndex]);\n  };\n\n  const getThemeIcon = () => {\n    switch (currentTheme) {\n      case 'system':\n        return <Laptop className='size-[1.2rem]' />;\n      case 'light':\n        return <Sun className='size-[1.2rem]' />;\n      case 'dark':\n        return <Moon className='size-[1.2rem]' />;\n    }\n  };\n\n  const getThemeText = () => {\n    return currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1);\n  };\n\n  return (\n    <Button variant='outline' size={withText ? 'default' : 'icon'} onClick={cycleTheme} {...props}>\n      {getThemeIcon()}\n      {withText && <span className='ml-2 capitalize'>{getThemeText()}</span>}\n      <span className='sr-only'>Toggle theme</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/theme-button.tsx')),
  },
  'select-field': {
    name: 'select-field',
    path: '#/registry/ui/select-field.tsx',
    code: "import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport type { SelectProps } from '@radix-ui/react-select';\nimport type { Control, Path, PathValue } from 'react-hook-form';\n\nexport interface SelectFieldOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectFieldProps<T extends Record<string, string>> extends SelectProps {\n  control: Control<T>;\n  name: Path<T>;\n  values: SelectFieldOption[];\n  label: string;\n  placeholder?: string;\n  description?: string;\n  defaultValues?: PathValue<T, Path<T>>;\n}\n\nexport function SelectField<TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  values,\n  defaultValues,\n  label,\n  placeholder,\n  description,\n  ...props\n}: SelectFieldProps<TFieldValues>) {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      defaultValue={defaultValues}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <Select onValueChange={field.onChange} defaultValue={field.value} {...props}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {values.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/select-field.tsx')),
  },
  'hover-reveal': {
    name: 'hover-reveal',
    path: '#/registry/ui/hover-reveal.tsx',
    code: "import { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card';\nimport type * as React from 'react';\n\nexport interface HoverRevealProps extends React.RefAttributes<HTMLDivElement> {\n  children: string | React.JSX.Element;\n  content: string | React.JSX.Element;\n}\n\nexport function HoverReveal({ children, content, ...props }: HoverRevealProps) {\n  return (\n    <HoverCard {...props}>\n      <HoverCardTrigger className='cursor-pointer'>{children}</HoverCardTrigger>\n      <HoverCardContent className='text-sm w-full'>{content}</HoverCardContent>\n    </HoverCard>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/hover-reveal.tsx')),
  },
  'title-section': {
    name: 'title-section',
    path: '#/registry/block/title-section.tsx',
    code: "import type * as React from 'react';\n\nexport interface TitleSectionProps extends React.RefAttributes<HTMLDivElement> {\n  title: string;\n  description: string | React.JSX.Element;\n}\n\nexport function TitleSection({ title, description, ...props }: TitleSectionProps) {\n  return (\n    <div className='text-center -space-y-2 my-6 max-md:text-sm' {...props}>\n      <h1 className='text-4xl md:text-5xl font-bold'>{title}</h1>\n      <p className='opacity-80 text-center'>{description}</p>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/block/title-section.tsx')),
  },
  'input-field.example': {
    name: 'input-field.example',
    path: '#/registry/examples/input-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  name: z.string().nonempty({ message: 'Name is required' }),\n});\n\nexport default function InputFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      name: '',\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Hello ${values.name}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <InputField control={form.control} name='name' label='Name' description='Your name' placeholder='John' />\n        <SubmitButton label='Check' />\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/input-field.tsx')),
  },
  'submit-button.loading.example': {
    name: 'submit-button.loading.example',
    path: '#/registry/examples/submit-button.loading.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonLoadingExample() {\n  return <SubmitButton label='Submit' loading={true} />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/submit-button.loading.tsx')),
  },
  'submit-button.example': {
    name: 'submit-button.example',
    path: '#/registry/examples/submit-button.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonExample() {\n  return <SubmitButton label='Submit' />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/submit-button.tsx')),
  },
  'title-section.example': {
    name: 'title-section.example',
    path: '#/registry/examples/title-section.tsx',
    code: "import { TitleSection } from '@/components/block/shuip/title-section';\n\nexport default function TitleSectionExample() {\n  return <TitleSection title='Title' description='Lorem ipsum dolor sit amet consectetur, adipisicing elit.' />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/title-section.tsx')),
  },
  'copy-button.with-custom-icons.example': {
    name: 'copy-button.with-custom-icons.example',
    path: '#/registry/examples/copy-button.with-custom-icons.tsx',
    code: "'use client';\n\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\nimport { Cat, Dog } from 'lucide-react';\n\nexport default function CopyButtonWithCustomIconsExample() {\n  return (\n    <CopyButton\n      value='Hello, cat!'\n      copiedIcon={<Dog className='size-6' />}\n      notCopiedIcon={<Cat className='size-6' />}\n      className='size-8'\n      variant={'default'}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/copy-button.with-custom-icons.tsx')),
  },
  'copy-button.example': {
    name: 'copy-button.example',
    path: '#/registry/examples/copy-button.tsx',
    code: "'use client';\n\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\n\nexport default function CopyButtonExample() {\n  return <CopyButton value='Hello, world!' />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/copy-button.tsx')),
  },
  'radio-field.example': {
    name: 'radio-field.example',
    path: '#/registry/examples/radio-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { RadioField } from '@/components/ui/shuip/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  selection: z.enum(['1', '2', '3']),\n});\n\nexport default function RadioFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: '1' as const,\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <RadioField control={form.control} name='selection' label='selection' values={['1', '2', '3']} />\n        <SubmitButton label='Check' />\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/radio-field.tsx')),
  },
  'confirmation-dialog.example': {
    name: 'confirmation-dialog.example',
    path: '#/registry/examples/confirmation-dialog.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport { ConfirmationDialog } from '@/components/ui/shuip/confirmation-dialog';\n\nexport default function ConfirmationDialogExample() {\n  return (\n    <ConfirmationDialog\n      trigger={<Button>Open confirmation dialog</Button>}\n      title='Confirmation Dialog'\n      description='Are you sure you want to make this action?'\n      labelConfirmButton='Make it'\n      onConfirm={() => alert('Confirmed')}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/confirmation-dialog.tsx')),
  },
  'theme-button.text.example': {
    name: 'theme-button.text.example',
    path: '#/registry/examples/theme-button.text.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonTextExample() {\n  return <ThemeButton withText />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/theme-button.text.tsx')),
  },
  'theme-button.example': {
    name: 'theme-button.example',
    path: '#/registry/examples/theme-button.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonExample() {\n  return <ThemeButton />;\n}\n",
    component: React.lazy(() => import('#/registry/examples/theme-button.tsx')),
  },
  'select-field.example': {
    name: 'select-field.example',
    path: '#/registry/examples/select-field.tsx',
    code: "'use client';\n\nimport { Form } from '@/components/ui/form';\nimport { SelectField, type SelectFieldOption } from '@/components/ui/shuip/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\n\nconst zodSchema = z.object({\n  selection: z.enum(['1', '2', '3']),\n});\n\nconst values: SelectFieldOption[] = [\n  { label: 'First', value: '1' },\n  { label: 'Second', value: '2' },\n  { label: 'Third', value: '3' },\n];\n\nexport default function SelectFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: '1' as const,\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <SelectField\n          control={form.control}\n          placeholder='Select an option'\n          name='selection'\n          label='selection'\n          values={values}\n        />\n        <SubmitButton label='Check' />\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/examples/select-field.tsx')),
  },
  'hover-reveal.example': {
    name: 'hover-reveal.example',
    path: '#/registry/examples/hover-reveal.tsx',
    code: "import { HoverReveal } from '@/components/ui/shuip/hover-reveal';\n\nexport default function HoverRevealExample() {\n  return <HoverReveal content={'Description'}>Hover me</HoverReveal>;\n}\n",
    component: React.lazy(() => import('#/registry/examples/hover-reveal.tsx')),
  },
};
/**
 * registry/(ui|block): registry/examples[]
 */
export const COMPONENT_CATEGORIES: Record<string, string[]> = {
  'input-field': ['input-field.example'],
  'submit-button': ['submit-button.loading.example', 'submit-button.example'],
  'copy-button': ['copy-button.with-custom-icons.example', 'copy-button.example'],
  'radio-field': ['radio-field.example'],
  'confirmation-dialog': ['confirmation-dialog.example'],
  'theme-button': ['theme-button.text.example', 'theme-button.example'],
  'select-field': ['select-field.example'],
  'hover-reveal': ['hover-reveal.example'],
  'title-section': ['title-section.example'],
};
