// @ts-nocheck

/**
 * This file is autogenerated by @link https://github.com/plvo/shuip/blob/main/scripts/generate-registry.ts
 * Do not edit this file directly.
 */

import * as React from 'react';

interface RegistryComponent {
  path: string;
  code: string;
  component: any;
}

export const REGISTRY_INDEX: Record<string, RegistryComponent> = {
  'rhf-utils': {
    path: '#/registry/lib/rhf-utils.ts',
    code: "import z from 'zod';\n\n/**\n * Get the changed fields between two objects\n * @param oldObject - The old object\n * @param newObject - The new object\n * @param options - Configuration options\n * @returns The changed fields\n * @example\n * getChangedFields({ a: 1 }, { a: 1 }) // { }\n * getChangedFields({ a: 1 }, { a: 2 }) // { a: 2 }\n * getChangedFields({ a: 1 }, { b: 1 }) // { a: undefined, b:1 }\n */\n\nexport function getChangedFields<T extends Record<string, unknown>>(\n  oldObject: T | null | undefined,\n  newObject: T | null | undefined,\n): Partial<T> {\n  const changedFields: Partial<T> = {};\n\n  if (!oldObject && !newObject) {\n    return changedFields;\n  }\n\n  if (!oldObject) {\n    return newObject ? { ...newObject } : changedFields;\n  }\n\n  if (!newObject) {\n    const result: Partial<T> = {};\n    Object.keys(oldObject).forEach((key) => {\n      result[key as keyof T] = undefined as T[keyof T];\n    });\n    return result;\n  }\n\n  const allKeys = new Set([...Object.keys(oldObject), ...Object.keys(newObject)]);\n\n  allKeys.forEach((key) => {\n    const typedKey = key as keyof T;\n    const oldValue = oldObject[typedKey];\n    const newValue = newObject[typedKey];\n\n    if (!isDeepEqual(oldValue, newValue)) {\n      changedFields[typedKey] = newValue;\n    }\n  });\n\n  return changedFields;\n}\n\n/**\n * Deep equality comparison helper function\n * @param a - The first value to compare\n * @param b - The second value to compare\n * @returns True if the values are deeply equal, false otherwise\n * @example\n * isDeepEqual(1, 1) // true\n * isDeepEqual(1, '1') // false\n * isDeepEqual({ a: 1 }, { a: 1 }) // true\n * isDeepEqual({ a: 1 }, { a: 2 }) // false\n * isDeepEqual([1, 2, 3], [1, 2, 3]) // true\n * isDeepEqual([1, 2, 3], [1, 2, 4]) // false\n */\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n\n  if (a == null || b == null) return a === b;\n  if (typeof a !== typeof b) return false;\n\n  if (typeof a !== 'object') return a === b;\n\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    return a.every((item, index) => isDeepEqual(item, b[index]));\n  }\n\n  const aObj = a as Record<string, unknown>;\n  const bObj = b as Record<string, unknown>;\n\n  const aKeys = Object.keys(aObj);\n  const bKeys = Object.keys(bObj);\n\n  if (aKeys.length !== bKeys.length) return false;\n\n  return aKeys.every((key) => bKeys.includes(key) && isDeepEqual(aObj[key], bObj[key]));\n}\n\n/**\n * Get the default values for a zod schema\n * @param schema - The zod schema\n * @param data - The data to use to get the default values\n * @returns The default values\n * @example\n * // Basic usage\n * getZodDefaultValues(z.object({ name: z.string() })) // { name: '' }\n *\n * // With nested objects\n * getZodDefaultValues(z.object({\n *   user: z.object({\n *     name: z.string(),\n *     age: z.number()\n *   })\n * })) // { user: { name: '', age: 0 } }\n *\n * // With provided data\n * getZodDefaultValues(\n *   z.object({ name: z.string(), age: z.number() }),\n *   { name: 'John' }\n * ) // { name: 'John', age: 0 }\n *\n */\nexport function getZodDefaultValues<T extends z.ZodObject<z.ZodRawShape>>(\n  schema: T,\n  data?: Partial<z.infer<T>>,\n): z.infer<T> {\n  return Object.keys(schema.shape).reduce<z.infer<T>>(\n    (acc, key) => {\n      acc[key as keyof z.infer<T>] =\n        data && data[key] !== undefined\n          ? data[key]\n          : (zodTypeDefaultValue(schema.shape[key] as z.ZodTypeAny) as z.infer<T>[keyof z.infer<T>]);\n      return acc;\n    },\n    {} as z.infer<T>,\n  );\n}\n\n/**\n * Get the default value for a zod type\n * @param key - The zod type\n * @returns The default value\n * @example\n * zodTypeDefaultValue(z.string()) // ''\n * zodTypeDefaultValue(z.number()) // 0\n * zodTypeDefaultValue(z.boolean()) // false\n * zodTypeDefaultValue(z.date()) // ''\n * zodTypeDefaultValue(z.array(z.string())) // []\n * zodTypeDefaultValue(z.object({ name: z.string() })) // { name: '' }\n */\nexport function zodTypeDefaultValue(key: z.ZodTypeAny): unknown {\n  switch (key.constructor) {\n    case z.ZodString:\n      return '';\n    case z.ZodNumber:\n      return 0;\n    case z.ZodBoolean:\n      return false;\n    case z.ZodDate:\n      return undefined;\n    case z.ZodArray:\n      return [];\n    case z.ZodObject: {\n      const objectSchema = key as z.ZodObject<z.ZodRawShape>;\n      return Object.keys(objectSchema.shape).reduce<Record<string, unknown>>((acc, fieldKey) => {\n        acc[fieldKey] = zodTypeDefaultValue(objectSchema.shape[fieldKey] as z.ZodTypeAny);\n        return acc;\n      }, {});\n    }\n    case z.ZodEnum: {\n      return undefined;\n    }\n    case z.enum: {\n      return undefined;\n    }\n    case z.ZodOptional:\n      return undefined;\n    case z.ZodNullable:\n      return null;\n    default:\n      return undefined;\n  }\n}\n",
    component: React.lazy(() => import('#/registry/lib/rhf-utils.ts')),
  },
  places: {
    path: '#/registry/actions/places.ts',
    code: "'use server';\n\nconst GOOGLE_PLACES_API_KEY = process.env.GOOGLE_PLACES_API_KEY;\n\nexport interface AutocompleteParams {\n  input: string;\n  components?: string;\n  types?: string;\n  language?: string;\n}\n\nexport async function getPlacesAutocomplete({ input, components, types, language = 'fr' }: AutocompleteParams) {\n  try {\n    if (!GOOGLE_PLACES_API_KEY) {\n      throw new Error('Google Places API key not configured');\n    }\n\n    if (!input || input.length < 3) {\n      return { predictions: [] };\n    }\n\n    // Construire l'URL de l'API Google Places Autocomplete\n    const params = new URLSearchParams({\n      input,\n      key: GOOGLE_PLACES_API_KEY,\n      language,\n    });\n\n    if (components) {\n      params.append('components', components);\n    }\n\n    if (types) {\n      params.append('types', types);\n    }\n\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/autocomplete/json?${params}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Google Places API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data.status !== 'OK' && data.status !== 'ZERO_RESULTS') {\n      throw new Error(`Google Places API error: ${data.status}`);\n    }\n\n    // Transformer les donnÃ©es pour notre format\n    const predictions =\n      data.predictions?.map((prediction: any) => ({\n        placeId: prediction.place_id,\n        description: prediction.description,\n        mainText: prediction.structured_formatting?.main_text || prediction.description,\n        secondaryText: prediction.structured_formatting?.secondary_text || '',\n        types: prediction.types || [],\n      })) || [];\n\n    return { predictions };\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : 'Internal server error', predictions: [] };\n  }\n}\n\nexport interface PlaceDetailsParams {\n  placeId: string;\n  fields?: string[];\n  language?: string;\n}\n\nexport async function getPlaceDetails({ placeId, fields, language = 'fr' }: PlaceDetailsParams) {\n  try {\n    if (!GOOGLE_PLACES_API_KEY) {\n      throw new Error('Google Places API key not configured');\n    }\n\n    if (!placeId) {\n      throw new Error('Place ID is required');\n    }\n\n    const params = new URLSearchParams({\n      place_id: placeId,\n      key: GOOGLE_PLACES_API_KEY,\n      language,\n    });\n\n    if (fields && Array.isArray(fields)) {\n      params.append('fields', fields.join(','));\n    }\n\n    const response = await fetch(`https://maps.googleapis.com/maps/api/place/details/json?${params}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error(`Google Places API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n\n    if (data.status !== 'OK') {\n      throw new Error(`Google Places API error: ${data.status}`);\n    }\n\n    return data;\n  } catch (error) {\n    return { error: error instanceof Error ? error.message : 'Internal server error' };\n  }\n}\n",
    component: React.lazy(() => import('#/registry/actions/places.ts')),
  },
  'responsive-dialog': {
    path: '#/registry/block/responsive-dialog.tsx',
    code: "'use client';\n\nimport * as React from 'react';\nimport {\n  Drawer,\n  DrawerClose,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/components/ui/drawer';\nimport {\n  SideDialog,\n  SideDialogClose,\n  SideDialogContent,\n  SideDialogDescription,\n  SideDialogFooter,\n  SideDialogHeader,\n  SideDialogTitle,\n  SideDialogTrigger,\n} from '@/components/ui/shuip/side-dialog';\n\ntype ResponsiveDialogPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'left' | 'right';\ntype ResponsiveDialogSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\ntype ResponsiveDialogBreakpoint = 'sm' | 'md' | 'lg' | 'xl' | number;\n\nexport interface ResponsiveDialogProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  position?: ResponsiveDialogPosition;\n  size?: ResponsiveDialogSize;\n  breakpoint?: ResponsiveDialogBreakpoint;\n  children?: React.ReactNode;\n}\n\nexport interface ResponsiveDialogTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  showCloseButton?: boolean;\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface ResponsiveDialogCloseProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  children?: React.ReactNode;\n}\n\n// Helper function to convert breakpoint to pixels\nconst getBreakpointValue = (breakpoint: ResponsiveDialogBreakpoint): number => {\n  if (typeof breakpoint === 'number') {\n    return breakpoint;\n  }\n\n  const breakpoints = {\n    sm: 640,\n    md: 768,\n    lg: 1024,\n    xl: 1280,\n  };\n\n  return breakpoints[breakpoint];\n};\n\n// Custom hook for responsive breakpoint detection\nconst useCustomBreakpoint = (breakpoint: ResponsiveDialogBreakpoint) => {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);\n\n  React.useEffect(() => {\n    const breakpointValue = getBreakpointValue(breakpoint);\n    const mql = window.matchMedia(`(max-width: ${breakpointValue - 1}px)`);\n\n    const onChange = () => {\n      setIsMobile(window.innerWidth < breakpointValue);\n    };\n\n    mql.addEventListener('change', onChange);\n    setIsMobile(window.innerWidth < breakpointValue);\n\n    return () => mql.removeEventListener('change', onChange);\n  }, [breakpoint]);\n\n  return !!isMobile;\n};\n\n// Context for managing responsive state\nconst ResponsiveDialogContext = React.createContext<{\n  isMobile: boolean;\n}>({\n  isMobile: false,\n});\n\nexport function ResponsiveDialog({\n  open,\n  onOpenChange,\n  position = 'bottom-right',\n  size = 'sm',\n  breakpoint = 'md',\n  children,\n}: ResponsiveDialogProps) {\n  const isMobile = useCustomBreakpoint(breakpoint);\n\n  return (\n    <ResponsiveDialogContext.Provider value={{ isMobile }}>\n      {isMobile ? (\n        <Drawer open={open} onOpenChange={onOpenChange}>\n          {children}\n        </Drawer>\n      ) : (\n        <SideDialog open={open} onOpenChange={onOpenChange} position={position} size={size}>\n          {children}\n        </SideDialog>\n      )}\n    </ResponsiveDialogContext.Provider>\n  );\n}\n\nexport function ResponsiveDialogTrigger({ asChild, children, ...props }: ResponsiveDialogTriggerProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerTrigger asChild={asChild} {...props}>\n        {children}\n      </DrawerTrigger>\n    );\n  }\n\n  return (\n    <SideDialogTrigger asChild={asChild} {...props}>\n      {children}\n    </SideDialogTrigger>\n  );\n}\n\nexport function ResponsiveDialogContent({\n  showCloseButton = true,\n  className,\n  children,\n  ...props\n}: ResponsiveDialogContentProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerContent className={className} {...props}>\n        {children}\n      </DrawerContent>\n    );\n  }\n\n  return (\n    <SideDialogContent showCloseButton={showCloseButton} className={className} {...props}>\n      {children}\n    </SideDialogContent>\n  );\n}\n\nexport function ResponsiveDialogHeader({ className, children, ...props }: ResponsiveDialogHeaderProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerHeader className={className} {...props}>\n        {children}\n      </DrawerHeader>\n    );\n  }\n\n  return (\n    <SideDialogHeader className={className} {...props}>\n      {children}\n    </SideDialogHeader>\n  );\n}\n\nexport function ResponsiveDialogTitle({ className, children, ...props }: ResponsiveDialogTitleProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerTitle className={className} {...props}>\n        {children}\n      </DrawerTitle>\n    );\n  }\n\n  return (\n    <SideDialogTitle className={className} {...props}>\n      {children}\n    </SideDialogTitle>\n  );\n}\n\nexport function ResponsiveDialogDescription({ className, children, ...props }: ResponsiveDialogDescriptionProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerDescription className={className} {...props}>\n        {children}\n      </DrawerDescription>\n    );\n  }\n\n  return (\n    <SideDialogDescription className={className} {...props}>\n      {children}\n    </SideDialogDescription>\n  );\n}\n\nexport function ResponsiveDialogFooter({ className, children, ...props }: ResponsiveDialogFooterProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerFooter className={className} {...props}>\n        {children}\n      </DrawerFooter>\n    );\n  }\n\n  return (\n    <SideDialogFooter className={className} {...props}>\n      {children}\n    </SideDialogFooter>\n  );\n}\n\nexport function ResponsiveDialogClose({ asChild, children, ...props }: ResponsiveDialogCloseProps) {\n  const { isMobile } = React.useContext(ResponsiveDialogContext);\n\n  if (isMobile) {\n    return (\n      <DrawerClose asChild={asChild} {...props}>\n        {children}\n      </DrawerClose>\n    );\n  }\n\n  return (\n    <SideDialogClose asChild={asChild} {...props}>\n      {children}\n    </SideDialogClose>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/block/responsive-dialog.tsx')),
  },
  'title-section': {
    path: '#/registry/block/title-section.tsx',
    code: "import type * as React from 'react';\n\nexport interface TitleSectionProps extends React.RefAttributes<HTMLDivElement> {\n  title: string;\n  description: string | React.JSX.Element;\n}\n\nexport function TitleSection({ title, description, ...props }: TitleSectionProps) {\n  return (\n    <div className='text-center -space-y-2 my-6 max-md:text-sm' {...props}>\n      <h1 className='text-4xl md:text-5xl font-bold'>{title}</h1>\n      <p className='opacity-80 text-center'>{description}</p>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/block/title-section.tsx')),
  },
  'rhf-checkbox-field': {
    path: '#/registry/ui/rhf-checkbox-field.tsx',
    code: "'use client';\n\nimport type { FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\n\nexport interface CheckboxFieldProps<T extends FieldValues> extends React.ComponentProps<typeof Checkbox> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  label: string;\n  boxLabel?: string;\n  description?: string;\n}\n\nexport function CheckboxField<T extends FieldValues>({\n  register,\n  label,\n  boxLabel,\n  description,\n  ...props\n}: CheckboxFieldProps<T>) {\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => {\n        if (!field) {\n          console.error('Field is missing for CheckboxField', field);\n          return <></>;\n        }\n\n        return (\n          <FormItem className='space-y-1.5'>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-sm' />\n            </FormLabel>\n            <FormControl>\n              <div className='flex items-center gap-2'>\n                <Checkbox checked={field.value} onCheckedChange={field.onChange} {...props} />\n                {boxLabel && (\n                  <label htmlFor={field.name} className='text-sm cursor-pointer'>\n                    {boxLabel}\n                  </label>\n                )}\n              </div>\n            </FormControl>\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage className='sm:hidden text-xs text-left' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\nexport default CheckboxField;\n",
    component: React.lazy(() => import('#/registry/ui/rhf-checkbox-field.tsx')),
  },
  'submit-button': {
    path: '#/registry/ui/submit-button.tsx',
    code: "import { ReloadIcon } from '@radix-ui/react-icons';\nimport type { VariantProps } from 'class-variance-authority';\nimport type * as React from 'react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface SubmitButtonProps extends ButtonProps {\n  children?: React.ReactNode;\n  disabled?: boolean;\n  loading?: boolean;\n  icon?: React.JSX.Element;\n}\n\nexport function SubmitButton({\n  children,\n  disabled,\n  loading,\n  icon = <ReloadIcon className='mr-2 size-4 animate-spin' aria-label='Loading' />,\n  ...props\n}: SubmitButtonProps) {\n  return (\n    <Button type='submit' aria-label='Submit' className={'w-full'} disabled={disabled || loading} {...props}>\n      {loading && icon}\n      {children}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/submit-button.tsx')),
  },
  'tsf-radio-field': {
    path: '#/registry/ui/tsf-radio-field.tsx',
    code: "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\n\nexport interface RadioFieldOption {\n  label: string;\n  value: string;\n}\n\nexport interface RadioFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  options: RadioFieldOption[];\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<typeof RadioGroup>;\n}\n\nexport function RadioField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({ form, name, options, label, description, formProps, fieldProps, props }: RadioFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors = field.state.meta.errors;\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <RadioGroup\n              name={field.name}\n              value={field.state.value as string}\n              onValueChange={(value) => field.handleChange(value as TData)}\n              onBlur={field.handleBlur}\n              aria-invalid={!isValid}\n              {...props}\n            >\n              {options.map(({ label, value }) => (\n                <div key={value} className='flex items-center space-x-3 space-y-0'>\n                  <RadioGroupItem value={value} id={`${field.name}-${value}`} />\n                  <Label htmlFor={`${field.name}-${value}`}>{label}</Label>\n                </div>\n              ))}\n            </RadioGroup>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-radio-field.tsx')),
  },
  'tsf-select-field': {
    path: '#/registry/ui/tsf-select-field.tsx',
    code: "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\n/**\n * Key is the label, value is the value\n * @example\n * const options: SelectFieldOption = {\n *   'First': '1',\n *   'Second': '2',\n *   'Third': '3',\n * };\n */\nexport type SelectFieldOption = Record<string, string>;\n\nexport interface SelectFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  options: SelectFieldOption;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<typeof Select>;\n}\n\nexport function SelectField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({\n  form,\n  name,\n  options,\n  label,\n  description,\n  placeholder,\n  formProps,\n  fieldProps,\n  props,\n}: SelectFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <Select\n              name={field.name}\n              value={field.state.value as string}\n              onValueChange={(value) => field.handleChange(value as TData)}\n              aria-invalid={!isValid}\n              {...props}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(options).map(([label, value]) => (\n                  <SelectItem key={value} value={value}>\n                    {label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-select-field.tsx')),
  },
  'confirmation-dialog': {
    path: '#/registry/ui/confirmation-dialog.tsx',
    code: "import type * as React from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\n\nexport interface ConfirmationDialogProps extends React.RefAttributes<HTMLDialogElement> {\n  trigger?: React.ReactNode;\n  title?: string;\n  description?: string;\n  labelConfirmButton?: string;\n  onConfirm?: () => void;\n}\n\nexport function ConfirmationDialog({\n  trigger,\n  title,\n  description,\n  labelConfirmButton,\n  onConfirm,\n  ...props\n}: ConfirmationDialogProps) {\n  return (\n    <Dialog {...props}>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription className='md:text-left'>{description}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button onClick={onConfirm}>{labelConfirmButton}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/confirmation-dialog.tsx')),
  },
  'hover-reveal': {
    path: '#/registry/ui/hover-reveal.tsx',
    code: "import type * as React from 'react';\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card';\n\nexport interface HoverRevealProps extends React.RefAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport function HoverReveal({ children, content, ...props }: HoverRevealProps) {\n  return (\n    <HoverCard {...props}>\n      <HoverCardTrigger className='cursor-pointer'>{children}</HoverCardTrigger>\n      <HoverCardContent className='text-sm w-full'>{content}</HoverCardContent>\n    </HoverCard>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/hover-reveal.tsx')),
  },
  'theme-button': {
    path: '#/registry/ui/theme-button.tsx',
    code: "import type { VariantProps } from 'class-variance-authority';\nimport { Laptop, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport * as React from 'react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\ntype Theme = 'system' | 'light' | 'dark';\n\nexport interface ThemeButtonProps extends ButtonProps {\n  withText?: boolean;\n}\n\nexport function ThemeButton({ withText, ...props }: ThemeButtonProps) {\n  const { theme, setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<Theme>('system');\n\n  React.useEffect(() => {\n    setCurrentTheme(theme as Theme);\n  }, [theme]);\n\n  const cycleTheme = () => {\n    const themes: Theme[] = ['system', 'light', 'dark'];\n    const currentIndex = themes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    setTheme(themes[nextIndex]);\n  };\n\n  const getThemeIcon = () => {\n    switch (currentTheme) {\n      case 'system':\n        return <Laptop className='size-[1.2rem]' />;\n      case 'light':\n        return <Sun className='size-[1.2rem]' />;\n      case 'dark':\n        return <Moon className='size-[1.2rem]' />;\n    }\n  };\n\n  const getThemeText = () => {\n    return currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1);\n  };\n\n  return (\n    <Button variant='outline' size={withText ? 'default' : 'icon'} onClick={cycleTheme} {...props}>\n      {getThemeIcon()}\n      {withText && <span className='ml-2 capitalize'>{getThemeText()}</span>}\n      <span className='sr-only'>Toggle theme</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/theme-button.tsx')),
  },
  'side-dialog': {
    path: '#/registry/ui/side-dialog.tsx',
    code: "'use client';\n\nimport { XIcon } from 'lucide-react';\nimport * as React from 'react';\nimport { createPortal } from 'react-dom';\nimport { cn } from '@/lib/utils';\n\ntype SideDialogPosition = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'left' | 'right';\ntype SideDialogSize = 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl';\n\nexport interface SideDialogProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  position?: SideDialogPosition;\n  size?: SideDialogSize;\n  children?: React.ReactNode;\n}\n\nexport interface SideDialogTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  children: React.ReactNode;\n}\n\nexport interface SideDialogContentProps extends React.HTMLAttributes<HTMLDivElement> {\n  showCloseButton?: boolean;\n  children: React.ReactNode;\n}\n\nexport interface SideDialogHeaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface SideDialogTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {\n  children: React.ReactNode;\n}\n\nexport interface SideDialogDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {\n  children: React.ReactNode;\n}\n\nexport interface SideDialogFooterProps extends React.HTMLAttributes<HTMLDivElement> {\n  children: React.ReactNode;\n}\n\nexport interface SideDialogCloseProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  asChild?: boolean;\n  children?: React.ReactNode;\n}\n\n// Context for managing dialog state\nconst SideDialogContext = React.createContext<{\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  position: SideDialogPosition;\n  size: SideDialogSize;\n}>({\n  open: false,\n  onOpenChange: () => {},\n  position: 'bottom-right',\n  size: 'sm',\n});\n\nexport function SideDialog({\n  open: controlledOpen,\n  onOpenChange: controlledOnOpenChange,\n  position = 'bottom-right',\n  size = 'sm',\n  children,\n}: SideDialogProps) {\n  // Internal state for uncontrolled mode\n  const [internalOpen, setInternalOpen] = React.useState(false);\n\n  // Use controlled props if provided, otherwise use internal state\n  const open = controlledOpen !== undefined ? controlledOpen : internalOpen;\n  const onOpenChange = controlledOnOpenChange !== undefined ? controlledOnOpenChange : setInternalOpen;\n\n  const contextValue = React.useMemo(\n    () => ({\n      open,\n      onOpenChange,\n      position,\n      size,\n    }),\n    [open, onOpenChange, position, size],\n  );\n\n  return <SideDialogContext.Provider value={contextValue}>{children}</SideDialogContext.Provider>;\n}\n\nexport function SideDialogTrigger({ asChild, children, onClick, ...props }: SideDialogTriggerProps) {\n  const { onOpenChange } = React.useContext(SideDialogContext);\n\n  const handleClick = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n      onOpenChange(true);\n    },\n    [onClick, onOpenChange],\n  );\n\n  if (asChild) {\n    return React.cloneElement(children as React.ReactElement, {\n      onClick: handleClick,\n      ...(props as React.ButtonHTMLAttributes<HTMLButtonElement>),\n    });\n  }\n\n  return (\n    <button data-slot='side-dialog-trigger' onClick={handleClick} {...props}>\n      {children}\n    </button>\n  );\n}\n\nexport function SideDialogContent({ showCloseButton = true, className, children, ...props }: SideDialogContentProps) {\n  const { open, onOpenChange, position, size } = React.useContext(SideDialogContext);\n  const [mounted, setMounted] = React.useState(false);\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  React.useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && open) {\n        onOpenChange(false);\n      }\n    };\n\n    if (open) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = '';\n    };\n  }, [open, onOpenChange]);\n\n  const handleOverlayClick = React.useCallback(\n    (e: React.MouseEvent) => {\n      if (e.target === e.currentTarget) {\n        onOpenChange(false);\n      }\n    },\n    [onOpenChange],\n  );\n\n  const getSizeClasses = (size: SideDialogSize) => {\n    const predefinedSizes = {\n      xs: 'w-full max-w-[min(20rem,calc(100vw-2rem))]',\n      sm: 'w-full max-w-[min(24rem,calc(100vw-2rem))]',\n      md: 'w-full max-w-[min(28rem,calc(100vw-2rem))]',\n      lg: 'w-full max-w-[min(32rem,calc(100vw-2rem))]',\n      xl: 'w-full max-w-[min(36rem,calc(100vw-2rem))]',\n      '2xl': 'w-full max-w-[min(42rem,calc(100vw-2rem))]',\n    };\n\n    return predefinedSizes[size as keyof typeof predefinedSizes] || 'w-full max-w-[min(24rem,calc(100vw-2rem))]';\n  };\n\n  const getPositionClasses = (pos: SideDialogPosition, size: SideDialogSize) => {\n    const baseClasses = 'fixed z-[100] bg-background border rounded-lg shadow-lg';\n    const sizeClasses = getSizeClasses(size);\n\n    switch (pos) {\n      case 'top-left':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'top-4 left-4',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-top-52 data-[state=closed]:slide-out-to-left-52',\n          'data-[state=open]:slide-in-from-top-52 data-[state=open]:slide-in-from-left-52',\n        );\n      case 'top-right':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'top-4 right-4',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-top-52 data-[state=closed]:slide-out-to-right-52',\n          'data-[state=open]:slide-in-from-top-52 data-[state=open]:slide-in-from-right-52',\n        );\n      case 'bottom-left':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'bottom-4 left-4',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-bottom-52 data-[state=closed]:slide-out-to-left-52',\n          'data-[state=open]:slide-in-from-bottom-52 data-[state=open]:slide-in-from-left-52',\n        );\n      case 'bottom-right':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'bottom-4 right-4',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-bottom-52 data-[state=closed]:slide-out-to-right-52',\n          'data-[state=open]:slide-in-from-bottom-52 data-[state=open]:slide-in-from-right-52',\n        );\n      case 'left':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'left-4 top-[50%] translate-y-[-50%]',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-left-52',\n          'data-[state=open]:slide-in-from-left-52',\n        );\n      case 'right':\n        return cn(\n          baseClasses,\n          sizeClasses,\n          'right-4 top-[50%] translate-y-[-50%]',\n          'data-[state=open]:animate-in data-[state=closed]:animate-out',\n          'data-[state=closed]:slide-out-to-right-52',\n          'data-[state=open]:slide-in-from-right-52',\n        );\n      default:\n        return cn(baseClasses, sizeClasses);\n    }\n  };\n\n  if (!mounted) return null;\n  if (!open) return null;\n\n  return createPortal(\n    <div\n      data-slot='side-dialog-overlay'\n      className='fixed inset-0 z-40 bg-black/50 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0'\n      data-state={open ? 'open' : 'closed'}\n      onClick={handleOverlayClick}\n    >\n      <div\n        data-slot='side-dialog-content'\n        data-state={open ? 'open' : 'closed'}\n        className={cn(getPositionClasses(position, size), 'p-6 duration-200', className)}\n        {...props}\n      >\n        {children}\n        {showCloseButton && (\n          <SideDialogClose className='absolute top-4 right-4 rounded-xs opacity-70 transition-opacity hover:opacity-100 focus:ring-2 focus:ring-offset-2 focus:outline-hidden'>\n            <XIcon className='size-4' />\n            <span className='sr-only'>Close</span>\n          </SideDialogClose>\n        )}\n      </div>\n    </div>,\n    document.body,\n  );\n}\n\nexport function SideDialogHeader({ className, children, ...props }: SideDialogHeaderProps) {\n  return (\n    <div data-slot='side-dialog-header' className={cn('flex flex-col gap-2 mb-4', className)} {...props}>\n      {children}\n    </div>\n  );\n}\n\nexport function SideDialogTitle({ className, children, ...props }: SideDialogTitleProps) {\n  return (\n    <h2 data-slot='side-dialog-title' className={cn('text-lg font-semibold leading-none', className)} {...props}>\n      {children}\n    </h2>\n  );\n}\n\nexport function SideDialogDescription({ className, children, ...props }: SideDialogDescriptionProps) {\n  return (\n    <p data-slot='side-dialog-description' className={cn('text-muted-foreground text-sm', className)} {...props}>\n      {children}\n    </p>\n  );\n}\n\nexport function SideDialogFooter({ className, children, ...props }: SideDialogFooterProps) {\n  return (\n    <div\n      data-slot='side-dialog-footer'\n      className={cn('flex flex-col-reverse gap-2 mt-4 sm:flex-row sm:justify-end', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport function SideDialogClose({ asChild, children, onClick, ...props }: SideDialogCloseProps) {\n  const { onOpenChange } = React.useContext(SideDialogContext);\n\n  const handleClick = React.useCallback(\n    (e: React.MouseEvent<HTMLButtonElement>) => {\n      onClick?.(e);\n      onOpenChange(false);\n    },\n    [onClick, onOpenChange],\n  );\n\n  if (asChild && children) {\n    return React.cloneElement(children as React.ReactElement, {\n      onClick: handleClick,\n      ...(props as React.HTMLAttributes<HTMLButtonElement>),\n    });\n  }\n\n  return (\n    <button data-slot='side-dialog-close' onClick={handleClick} {...props}>\n      {children}\n    </button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/side-dialog.tsx')),
  },
  'rhf-input-field': {
    path: '#/registry/ui/rhf-input-field.tsx',
    code: "'use client';\n\nimport { Eye, EyeOff } from 'lucide-react';\nimport * as React from 'react';\nimport type { ControllerRenderProps, FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\nimport { Button } from '@/components/ui/button';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\n\nexport interface InputFieldProps<T extends FieldValues> extends React.ComponentProps<typeof Input> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  label?: string;\n  description?: string;\n}\n\nexport function InputField<T extends FieldValues>({ register, label, description, ...props }: InputFieldProps<T>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const getInputType = () => {\n    if (props.type === 'password') {\n      return showPassword ? 'text' : 'password';\n    }\n    return props.type ?? 'text';\n  };\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    field: ControllerRenderProps<FieldValues, FieldPath<FieldValues>>,\n  ) => {\n    const value = e.target.value;\n    if (props.type === 'number') return field.onChange(value === '' ? '' : Number(value));\n    if (props.type === 'date') return field.onChange(value === '' ? '' : new Date(value));\n    return field.onChange(value);\n  };\n\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => {\n        return (\n          <FormItem>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-xs opacity-80' />\n            </FormLabel>\n            <FormControl>\n              <div className='relative'>\n                <Input {...field} {...props} type={getInputType()} onChange={(e) => onChange(e, field)} />\n                {props.type === 'password' && (\n                  <PasswordButton showPassword={showPassword} setShowPassword={setShowPassword} />\n                )}\n              </div>\n            </FormControl>\n            {description && <p className='text-muted-foreground text-xs'>{description}</p>}\n            <FormMessage className='sm:hidden text-xs text-left opacity-80' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\ninterface PasswordButtonProps {\n  showPassword: boolean;\n  setShowPassword: (showPassword: boolean) => void;\n}\n\nfunction PasswordButton({ showPassword, setShowPassword }: PasswordButtonProps) {\n  return (\n    <Button\n      type='button'\n      variant='ghost'\n      size='sm'\n      className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n      onClick={() => setShowPassword(!showPassword)}\n      tabIndex={-1}\n      aria-label={showPassword ? 'Hide password' : 'Show password'}\n    >\n      {showPassword ? <EyeOff className='size-4' aria-hidden='true' /> : <Eye className='size-4' aria-hidden='true' />}\n      <span className='sr-only'>{showPassword ? 'Hide password' : 'Show password'}</span>\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/rhf-input-field.tsx')),
  },
  'tsf-checkbox-field': {
    path: '#/registry/ui/tsf-checkbox-field.tsx',
    code: "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\n\nexport interface CheckboxFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  label: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<typeof Checkbox>;\n}\n\nexport function CheckboxField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({ form, name, label, description, formProps, fieldProps, props }: CheckboxFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors: Array<{ message: string }> = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            <div className='flex items-center gap-2'>\n              <Checkbox\n                name={field.name}\n                checked={field.state.value as boolean}\n                onCheckedChange={(checked) => field.handleChange(checked as TData)}\n                onBlur={field.handleBlur}\n                aria-invalid={!isValid}\n                {...props}\n              />\n              <FieldLabel htmlFor={field.name} className='text-sm cursor-pointer'>\n                {label}\n              </FieldLabel>\n            </div>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-checkbox-field.tsx')),
  },
  'rhf-select-field': {
    path: '#/registry/ui/rhf-select-field.tsx',
    code: "import type { SelectProps } from '@radix-ui/react-select';\nimport type { FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\n/**\n * Key is the label, value is the value\n * @example\n * const options: SelectFieldOption = {\n *   'First': '1',\n *   'Second': '2',\n *   'Third': '3',\n * };\n */\nexport type SelectFieldOption = Record<string, string>;\n\nexport interface SelectFieldProps<TFieldValues extends FieldValues> extends SelectProps {\n  register: UseFormRegisterReturn<FieldPath<TFieldValues>>;\n  options: SelectFieldOption;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  defaultValue?: TFieldValues[FieldPath<TFieldValues>];\n}\n\nexport function SelectField<TFieldValues extends FieldValues>({\n  register,\n  options,\n  label,\n  description,\n  placeholder,\n  defaultValue,\n  ...props\n}: SelectFieldProps<TFieldValues>) {\n  return (\n    <FormField\n      {...register}\n      defaultValue={defaultValue}\n      render={({ field }) => (\n        <FormItem>\n          {label && <FormLabel>{label}</FormLabel>}\n          <Select onValueChange={field.onChange} defaultValue={field.value} {...props}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {Object.entries(options).map(([label, value]) => (\n                <SelectItem key={label} value={value}>\n                  {label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/rhf-select-field.tsx')),
  },
  'tsf-textarea-field': {
    path: '#/registry/ui/tsf-textarea-field.tsx',
    code: "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { InfoIcon } from 'lucide-react';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { InputGroup, InputGroupAddon, InputGroupButton, InputGroupTextarea } from '@/components/ui/input-group';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\n\nexport interface TextareaFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: any;\n  // props?: React.ComponentProps<typeof InputGroupTextarea>;\n  tooltip?: React.ReactNode;\n}\n\nexport function TextareaField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({\n  form,\n  name,\n  label,\n  description,\n  formProps,\n  fieldProps,\n  props,\n  tooltip,\n}: TextareaFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <InputGroup>\n              <InputGroupTextarea\n                name={field.name}\n                value={field.state.value as string}\n                onChange={(e) => field.handleChange(e.target.value as TData)}\n                onBlur={field.handleBlur}\n                aria-invalid={!isValid}\n                {...props}\n              />\n              {tooltip && (\n                <InputGroupAddon align='block-end' className='justify-end'>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <InputGroupButton aria-label='Info' size='icon-xs'>\n                        <InfoIcon />\n                      </InputGroupButton>\n                    </TooltipTrigger>\n                    <TooltipContent>{tooltip}</TooltipContent>\n                  </Tooltip>\n                </InputGroupAddon>\n              )}\n            </InputGroup>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-textarea-field.tsx')),
  },
  'copy-button': {
    path: '#/registry/ui/copy-button.tsx',
    code: "'use client';\n\nimport type { VariantProps } from 'class-variance-authority';\nimport { CheckIcon, Copy } from 'lucide-react';\nimport * as React from 'react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\n\nconst DEFAULT_TIMEOUT = 2000;\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface CopyButtonProps extends ButtonProps {\n  value: string;\n  copiedIcon?: React.ReactNode;\n  notCopiedIcon?: React.ReactNode;\n}\n\nasync function copyToClipboardWithMeta(value: string) {\n  navigator.clipboard.writeText(value);\n}\n\nexport function CopyButton({ value, copiedIcon = <CheckIcon />, notCopiedIcon = <Copy />, ...props }: CopyButtonProps) {\n  const [hasCopied, setHasCopied] = React.useState(false);\n\n  React.useEffect(() => {\n    setTimeout(() => {\n      setHasCopied(false);\n    }, DEFAULT_TIMEOUT);\n  }, [hasCopied]);\n\n  return (\n    <Button\n      size='icon'\n      variant={'ghost'}\n      className={'z-10 size-4'}\n      onClick={() => {\n        copyToClipboardWithMeta(value);\n        setHasCopied(true);\n      }}\n      {...props}\n    >\n      <span className='sr-only'>Copy</span>\n      {hasCopied ? copiedIcon : notCopiedIcon}\n    </Button>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/copy-button.tsx')),
  },
  'tsf-input-field': {
    path: '#/registry/ui/tsf-input-field.tsx',
    code: "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { InfoIcon } from 'lucide-react';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { InputGroup, InputGroupAddon, InputGroupButton, InputGroupInput } from '@/components/ui/input-group';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\n\nexport interface InputFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<'input'>;\n  tooltip?: React.ReactNode;\n}\n\nexport function InputField<TFormData, TName extends DeepKeys<TFormData>, TData extends DeepValue<TFormData, TName>>({\n  form,\n  name,\n  label,\n  description,\n  formProps,\n  fieldProps,\n  props,\n  tooltip,\n}: InputFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors: Array<{ message: string }> = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <InputGroup>\n              <InputGroupInput\n                type='text'\n                name={field.name}\n                value={field.state.value as string}\n                onChange={(e) => field.handleChange(e.target.value as TData)}\n                onBlur={field.handleBlur}\n                aria-invalid={!isValid}\n                {...props}\n              />\n              {tooltip && (\n                <InputGroupAddon align='inline-end'>\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <InputGroupButton aria-label='Info' size='icon-xs'>\n                        <InfoIcon />\n                      </InputGroupButton>\n                    </TooltipTrigger>\n                    <TooltipContent>{tooltip}</TooltipContent>\n                  </Tooltip>\n                </InputGroupAddon>\n              )}\n            </InputGroup>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-input-field.tsx')),
  },
  'tsf-submit-button': {
    path: '#/registry/ui/tsf-submit-button.tsx',
    code: "import type { FormAsyncValidateOrFn, FormValidateOrFn, ReactFormApi } from '@tanstack/react-form';\nimport type { VariantProps } from 'class-variance-authority';\nimport { Loader2Icon } from 'lucide-react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface SubmitButtonProps<TFormData> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  children?: React.ReactNode;\n  props?: ButtonProps;\n}\n\nexport function SubmitButton<TFormData>({ form, children = 'Submit', props }: SubmitButtonProps<TFormData>) {\n  return (\n    <form.Subscribe selector={(state) => [state.isSubmitting, state.canSubmit]}>\n      {([isSubmitting, canSubmit]) => (\n        <Button type='submit' disabled={isSubmitting || !canSubmit} className='transition-all duration-300' {...props}>\n          {isSubmitting && <Loader2Icon role='status' aria-label='Loading' className={'size-4 animate-spin'} />}\n          {children}\n        </Button>\n      )}\n    </form.Subscribe>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-submit-button.tsx')),
  },
  'tsf-password-field': {
    path: '#/registry/ui/tsf-password-field.tsx',
    code: "'use client';\n\nimport type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Eye, EyeOff, InfoIcon } from 'lucide-react';\nimport React from 'react';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { InputGroup, InputGroupAddon, InputGroupButton, InputGroupInput } from '@/components/ui/input-group';\nimport { Tooltip, TooltipContent, TooltipTrigger } from '@/components/ui/tooltip';\n\nexport interface PasswordFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<'input'>;\n  tooltip?: React.ReactNode;\n}\n\nexport function PasswordField<TFormData, TName extends DeepKeys<TFormData>, TData extends DeepValue<TFormData, TName>>({\n  form,\n  name,\n  label,\n  description,\n  formProps,\n  fieldProps,\n  props,\n  tooltip,\n}: PasswordFieldProps<TFormData, TName, TData>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const handleTogglePassword = React.useCallback(() => {\n    setShowPassword((prev) => !prev);\n  }, []);\n\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors: Array<{ message: string }> = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <InputGroup>\n              <InputGroupInput\n                type={showPassword ? 'text' : 'password'}\n                placeholder='Enter password'\n                name={field.name}\n                value={field.state.value as string}\n                onChange={(e) => field.handleChange(e.target.value as TData)}\n                onBlur={field.handleBlur}\n                aria-invalid={!isValid}\n                {...props}\n              />\n              <InputGroupAddon align='inline-end'>\n                <InputGroupButton aria-label='Toggle password' onClick={handleTogglePassword}>\n                  {showPassword ? <EyeOff className='size-4' /> : <Eye className='size-4' />}\n                </InputGroupButton>\n\n                {tooltip && (\n                  <Tooltip>\n                    <TooltipTrigger asChild>\n                      <InputGroupButton aria-label='Info' size='icon-xs'>\n                        <InfoIcon />\n                      </InputGroupButton>\n                    </TooltipTrigger>\n                    <TooltipContent>{tooltip}</TooltipContent>\n                  </Tooltip>\n                )}\n              </InputGroupAddon>\n            </InputGroup>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/tsf-password-field.tsx')),
  },
  'address-field': {
    path: '#/registry/ui/address-field.tsx',
    code: "'use client';\n\nimport { Loader2, MapPin } from 'lucide-react';\nimport * as React from 'react';\nimport { type FieldPath, type FieldValues, type UseFormRegisterReturn, useFormContext } from 'react-hook-form';\nimport { z } from 'zod';\nimport { getPlaceDetails, getPlacesAutocomplete } from '@/actions/shuip/places';\nimport { Command, CommandEmpty, CommandGroup, CommandItem, CommandList } from '@/components/ui/command';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { cn } from '@/lib/utils';\n\nconst DEFAULT_COUNTRY = 'US';\nconst LANGUAGE_RESULT = 'en';\nconst DEBOUNCE_TIME = 300;\n\nexport const addressSchema = z.object({\n  street: z.string().min(1, 'Street is required'),\n  city: z.string().min(1, 'City is required'),\n  postalCode: z.string().min(1, 'Postal code is required'),\n  country: z.string().min(1, 'Country is required'),\n  fullAddress: z.string().min(1, 'Address is required'),\n  placeId: z.string().optional(),\n});\n\nexport type AddressData = z.infer<typeof addressSchema>;\n\ninterface AddressSuggestion {\n  placeId: string;\n  description: string;\n  mainText: string;\n  secondaryText: string;\n  types: string[];\n}\n\ninterface AddressFieldProps extends React.ComponentProps<typeof Input> {\n  register: UseFormRegisterReturn<FieldPath<FieldValues>>;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  country?: string;\n}\n\nexport function AddressField({\n  register,\n  label = 'Address',\n  placeholder = 'Enter your address',\n  description,\n  country = DEFAULT_COUNTRY,\n  ...props\n}: AddressFieldProps) {\n  const [inputValue, setInputValue] = React.useState('');\n  const [suggestions, setSuggestions] = React.useState<AddressSuggestion[]>([]);\n  const [loading, setLoading] = React.useState(false);\n  const [showSuggestions, setShowSuggestions] = React.useState(false);\n  const [selectedIndex, setSelectedIndex] = React.useState(-1);\n  const debounceTimerRef = React.useRef<NodeJS.Timeout | null>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n  const popoverRef = React.useRef<HTMLDivElement>(null);\n  const form = useFormContext();\n\n  const searchAddresses = async (query: string) => {\n    if (!query || query.length < 3) {\n      setSuggestions([]);\n      setShowSuggestions(false);\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const result = await getPlacesAutocomplete({\n        input: query,\n        components: country ? `country:${country}` : undefined,\n        types: 'address',\n        language: LANGUAGE_RESULT,\n      });\n\n      if (result.error) {\n        throw new Error(result.error);\n      }\n\n      setSuggestions(result.predictions || []);\n      setShowSuggestions(result.predictions?.length > 0);\n      setSelectedIndex(-1);\n    } catch (error) {\n      console.error('Error searching addresses:', error);\n      setSuggestions([]);\n      setShowSuggestions(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (debounceTimerRef.current) {\n      clearTimeout(debounceTimerRef.current);\n    }\n\n    if (inputValue.length >= 3) {\n      debounceTimerRef.current = setTimeout(() => {\n        searchAddresses(inputValue);\n      }, DEBOUNCE_TIME);\n    } else {\n      setSuggestions([]);\n      setShowSuggestions(false);\n    }\n\n    return () => {\n      if (debounceTimerRef.current) {\n        clearTimeout(debounceTimerRef.current);\n      }\n    };\n  }, [inputValue]);\n\n  const handleSelectAddress = async (suggestion: AddressSuggestion) => {\n    setInputValue(suggestion.description);\n    setShowSuggestions(false);\n    setSelectedIndex(-1);\n\n    const details = await getPlaceDetails({\n      placeId: suggestion.placeId,\n      fields: ['address_components', 'formatted_address', 'geometry'],\n      language: LANGUAGE_RESULT,\n    });\n\n    if (details?.result) {\n      const addressComponents = details.result.address_components || [];\n\n      let street = '';\n      let city = '';\n      let postalCode = '';\n      let country = '';\n\n      addressComponents.forEach((component: any) => {\n        const types = component.types;\n\n        if (types.includes('street_number')) {\n          street = `${component.long_name} ${street}`;\n        }\n        if (types.includes('route')) {\n          street = `${street} ${component.long_name}`;\n        }\n        if (types.includes('locality') || types.includes('administrative_area_level_2')) {\n          city = component.long_name;\n        }\n        if (types.includes('postal_code')) {\n          postalCode = component.long_name;\n        }\n        if (types.includes('country')) {\n          country = component.long_name;\n        }\n      });\n\n      form.setValue(`${name}.street`, street.trim());\n      form.setValue(`${name}.city`, city.trim());\n      form.setValue(`${name}.postalCode`, postalCode.trim());\n      form.setValue(`${name}.country`, country.trim());\n      form.setValue(`${name}.fullAddress`, details.result.formatted_address.trim());\n      form.setValue(`${name}.placeId`, suggestion.placeId.trim());\n    } else {\n      form.setValue(`${name}.fullAddress`, suggestion.description.trim());\n      form.setValue(`${name}.placeId`, suggestion.placeId.trim());\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (!showSuggestions || suggestions.length === 0) return;\n\n    switch (e.key) {\n      case 'ArrowDown':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev < suggestions.length - 1 ? prev + 1 : 0));\n        break;\n      case 'ArrowUp':\n        e.preventDefault();\n        setSelectedIndex((prev) => (prev > 0 ? prev - 1 : suggestions.length - 1));\n        break;\n      case 'Enter':\n        e.preventDefault();\n        if (selectedIndex >= 0 && selectedIndex < suggestions.length) {\n          handleSelectAddress(suggestions[selectedIndex]);\n        }\n        break;\n      case 'Escape':\n        e.preventDefault();\n        setShowSuggestions(false);\n        setSelectedIndex(-1);\n        inputRef.current?.blur();\n        break;\n    }\n  };\n\n  const handleFocus = () => {\n    if (suggestions.length > 0 && inputValue.length >= 3) {\n      setShowSuggestions(true);\n    }\n  };\n\n  const handleBlur = (e: React.FocusEvent) => {\n    const relatedTarget = e.relatedTarget as HTMLElement;\n    if (popoverRef.current?.contains(relatedTarget)) {\n      return;\n    }\n\n    setTimeout(() => {\n      setShowSuggestions(false);\n      setSelectedIndex(-1);\n    }, 150);\n  };\n\n  return (\n    <FormField\n      {...register}\n      name={`${register.name}.fullAddress`}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel className='flex items-center justify-between'>\n            {label}\n            <FormMessage className='max-sm:hidden text-xs opacity-80' />\n          </FormLabel>\n          <div className='relative'>\n            <Popover open={showSuggestions} onOpenChange={setShowSuggestions}>\n              <PopoverTrigger asChild>\n                <FormControl>\n                  <div className='relative'>\n                    <Input\n                      ref={inputRef}\n                      value={inputValue}\n                      placeholder={placeholder}\n                      onChange={(e) => {\n                        const value = e.target.value;\n                        setInputValue(value);\n                        field.onChange(value);\n                      }}\n                      onFocus={handleFocus}\n                      onBlur={handleBlur}\n                      onKeyDown={handleKeyDown}\n                      autoComplete='off'\n                      {...props}\n                    />\n                    <div className='absolute inset-y-0 right-0 flex items-center pr-3'>\n                      {loading ? (\n                        <Loader2 className='size-4 animate-spin text-muted-foreground' />\n                      ) : (\n                        <MapPin className='size-4 text-muted-foreground' />\n                      )}\n                    </div>\n                  </div>\n                </FormControl>\n              </PopoverTrigger>\n              <PopoverContent\n                ref={popoverRef}\n                className='p-0'\n                align='start'\n                onOpenAutoFocus={(e) => e.preventDefault()}\n                style={{ width: inputRef.current?.offsetWidth }}\n              >\n                <Command className='w-full'>\n                  <CommandList className='max-h-60'>\n                    <CommandEmpty>{loading ? 'Searching...' : 'No addresses found'}</CommandEmpty>\n                    <CommandGroup>\n                      {suggestions.map((suggestion, index) => (\n                        <CommandItem\n                          key={suggestion.placeId}\n                          value={suggestion.description}\n                          onSelect={() => handleSelectAddress(suggestion)}\n                          className={cn(\n                            'flex items-start space-x-2 p-3 cursor-pointer',\n                            selectedIndex === index && 'bg-accent',\n                          )}\n                        >\n                          <MapPin className='size-4 mt-0.5 text-muted-foreground flex-shrink-0' />\n                          <div className='flex-1 min-w-0'>\n                            <div className='font-medium text-sm'>{suggestion.mainText}</div>\n                            <div className='text-xs text-muted-foreground truncate'>{suggestion.secondaryText}</div>\n                          </div>\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  </CommandList>\n                </Command>\n              </PopoverContent>\n            </Popover>\n          </div>\n          {description && <p className='text-sm text-muted-foreground'>{description}</p>}\n          <FormMessage className='sm:hidden text-xs text-left opacity-80' />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/address-field.tsx')),
  },
  'rhf-query-boundary': {
    path: '#/registry/ui/rhf-query-boundary.tsx',
    code: "'use client';\n\nimport { QueryErrorResetBoundary } from '@tanstack/react-query';\nimport { AlertTriangle, RefreshCcw } from 'lucide-react';\nimport * as React from 'react';\nimport { ErrorBoundary, type FallbackProps } from 'react-error-boundary';\nimport { Button } from '@/components/ui/button';\n\ninterface QueryBoundaryProps {\n  children: React.ReactNode;\n  queryKeys?: string[];\n  loadingFallback?: React.ReactNode;\n  errorFallback?: (props: FallbackProps) => React.ReactNode;\n}\n\nexport function QueryBoundary({\n  children,\n  queryKeys = [],\n  loadingFallback = 'Loading...',\n  errorFallback,\n}: QueryBoundaryProps) {\n  return (\n    <QueryErrorResetBoundary>\n      {({ reset }) => (\n        <ErrorBoundary\n          onReset={reset}\n          fallbackRender={(props) =>\n            errorFallback ? errorFallback(props) : <DefaultErrorFallback {...props} queryKeys={queryKeys} />\n          }\n        >\n          <React.Suspense fallback={loadingFallback}>{children}</React.Suspense>\n        </ErrorBoundary>\n      )}\n    </QueryErrorResetBoundary>\n  );\n}\n\nexport function DefaultErrorFallback({\n  error,\n  resetErrorBoundary,\n  queryKeys = [],\n}: FallbackProps & { queryKeys?: string[] }) {\n  return (\n    <div className='p-6 rounded-lg border border-destructive/30 bg-destructive/5 flex flex-col items-center justify-center space-y-4 text-center'>\n      <AlertTriangle className='text-destructive size-12' />\n      <div>\n        <h3 className='text-lg font-semibold mb-2'>Oops, something went wrong!</h3>\n        <p className='text-muted-foreground'>{error.message || 'Unexpected error'}</p>\n        {queryKeys.length && (\n          <p className='text-xs text-muted-foreground mt-2'>\n            Concerned quer{queryKeys.length > 1 ? 'ies' : 'y'}: {queryKeys.join(', ')}\n          </p>\n        )}\n      </div>\n      <Button onClick={resetErrorBoundary} variant='outline' className='gap-2'>\n        <RefreshCcw className='size-4' />\n        Retry\n      </Button>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/rhf-query-boundary.tsx')),
  },
  'rhf-radio-field': {
    path: '#/registry/ui/rhf-radio-field.tsx',
    code: "import type { FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\n\nexport interface RadioFieldProps<T extends FieldValues> extends React.ComponentProps<typeof RadioGroup> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  options: string[];\n  label?: string;\n  description?: string;\n}\n\nexport function RadioField<T extends FieldValues>({\n  register,\n  options,\n  label,\n  description,\n  ...props\n}: RadioFieldProps<T>) {\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => (\n        <FormItem className='space-y-1.5'>\n          <FormLabel>{label}</FormLabel>\n          <FormControl>\n            <RadioGroup\n              onValueChange={field.onChange}\n              defaultValue={field.value}\n              className='flex flex-col space-y-1'\n              {...props}\n            >\n              {options.map((value: any) => (\n                <FormItem key={value} className='flex items-center space-x-3 space-y-0'>\n                  <FormControl>\n                    <RadioGroupItem value={value} />\n                  </FormControl>\n                  <FormLabel className='font-normal'>{value}</FormLabel>\n                </FormItem>\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage className='sm:hidden text-xs text-left' />\n        </FormItem>\n      )}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/registry/ui/rhf-radio-field.tsx')),
  },
  'tsf-checkbox-field.group.example': {
    path: '#/examples/tsf-checkbox-field.group.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { CheckboxField } from '#/registry/ui/tsf-checkbox-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfCheckboxFieldGroupExample() {\n  const form = useForm({\n    defaultValues: {\n      features: {\n        notifications: false,\n        analytics: false,\n        darkMode: false,\n        apiAccess: false,\n      },\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <div className='space-y-3'>\n        <h3 className='font-semibold'>Features</h3>\n        <p className='text-sm text-muted-foreground'>Select the features you want to enable</p>\n\n        <div className='space-y-3'>\n          <CheckboxField\n            form={form}\n            name='features.notifications'\n            label='Enable push notifications'\n            description='Receive real-time updates about your activity'\n          />\n\n          <CheckboxField\n            form={form}\n            name='features.analytics'\n            label='Enable analytics tracking'\n            description='Help us improve by sharing usage data'\n          />\n\n          <CheckboxField\n            form={form}\n            name='features.darkMode'\n            label='Enable dark mode'\n            description='Switch to a darker color scheme'\n          />\n\n          <CheckboxField\n            form={form}\n            name='features.apiAccess'\n            label='Enable API access'\n            description='Get programmatic access to your data'\n          />\n        </div>\n      </div>\n\n      <SubmitButton form={form}>Save Preferences</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-checkbox-field.group.tsx')),
  },
  'rhf-checkbox-field.example': {
    path: '#/examples/rhf-checkbox-field.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport CheckboxField from '@/components/ui/shuip/react-hook-form/checkbox-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst zodSchema = z.object({\n  checkbox: z.boolean(),\n});\n\nexport default function CheckboxFieldExample() {\n  const form = useForm({\n    defaultValues: { checkbox: false },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Checkbox: ${values.checkbox}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <CheckboxField register={form.register('checkbox')} label='Checkbox' description='Your checkbox' />\n        <SubmitButton>Submit</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-checkbox-field.tsx')),
  },
  'side-dialog.form.example': {
    path: '#/examples/side-dialog.form.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/react-hook-form/input-field';\nimport {\n  SideDialog,\n  SideDialogClose,\n  SideDialogContent,\n  SideDialogDescription,\n  SideDialogFooter,\n  SideDialogHeader,\n  SideDialogTitle,\n  SideDialogTrigger,\n} from '@/components/ui/shuip/side-dialog';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst formSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n});\n\nexport default function SideDialogSimpleExample() {\n  const [open, setOpen] = useState(false);\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n  });\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    await new Promise((resolve) => setTimeout(resolve, 1500));\n    alert(`Form submitted: ${JSON.stringify(data)}`);\n    setOpen(false);\n    form.reset();\n  };\n\n  return (\n    <SideDialog open={open} onOpenChange={setOpen}>\n      <SideDialogTrigger asChild>\n        <Button variant='outline'>Open Form Side Dialog</Button>\n      </SideDialogTrigger>\n      <SideDialogContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <SideDialogHeader>\n              <SideDialogTitle>Form Side Dialog</SideDialogTitle>\n              <SideDialogDescription>This is a form side dialog.</SideDialogDescription>\n            </SideDialogHeader>\n            <div className='space-y-4'>\n              <InputField register={form.register('name')} label='Name' description='This is a description' />\n            </div>\n            <SideDialogFooter>\n              <SideDialogClose asChild>\n                <Button variant='outline'>Cancel</Button>\n              </SideDialogClose>\n              <SubmitButton className='w-fit'>Submit</SubmitButton>\n            </SideDialogFooter>\n          </form>\n        </Form>\n      </SideDialogContent>\n    </SideDialog>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/side-dialog.form.tsx')),
  },
  'tsf-select-field.dynamic.example': {
    path: '#/examples/tsf-select-field.dynamic.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport React from 'react';\nimport { SelectField } from '@/components/ui/shuip/tanstack-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\n// Simulate API call\nasync function fetchCategories(): Promise<Record<string, string>> {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  return {\n    Technology: 'tech',\n    Design: 'design',\n    Marketing: 'marketing',\n    Finance: 'finance',\n    Health: 'health',\n  };\n}\n\nexport default function TsfSelectFieldDynamicExample() {\n  const [categories, setCategories] = React.useState<Record<string, string>>({});\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  const form = useForm({\n    defaultValues: {\n      category: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  React.useEffect(() => {\n    fetchCategories()\n      .then((data) => {\n        setCategories(data);\n        setIsLoading(false);\n      })\n      .catch(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  if (isLoading) {\n    return <div className='text-muted-foreground'>Loading categories...</div>;\n  }\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <SelectField\n        form={form}\n        name='category'\n        options={categories}\n        label='Category'\n        placeholder='Select a category'\n        description='Categories loaded from API'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a category' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form}>Submit</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-select-field.dynamic.tsx')),
  },
  'submit-button.example': {
    path: '#/examples/submit-button.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonExample() {\n  return <SubmitButton>Submit</SubmitButton>;\n}\n",
    component: React.lazy(() => import('#/examples/submit-button.tsx')),
  },
  'tsf-checkbox-field.dependent-fields.example': {
    path: '#/examples/tsf-checkbox-field.dependent-fields.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { CheckboxField } from '#/registry/ui/tsf-checkbox-field';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfCheckboxFieldDependentFieldsExample() {\n  const form = useForm({\n    defaultValues: {\n      customShipping: false,\n      shippingAddress: '',\n      sameAsBilling: false,\n      billingAddress: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const customShipping = useStore(form.store, (state) => state.values.customShipping);\n  const sameAsBilling = useStore(form.store, (state) => state.values.sameAsBilling);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <InputField\n        form={form}\n        name='billingAddress'\n        label='Billing Address'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Billing address is required' : undefined),\n          },\n        }}\n      />\n\n      <CheckboxField\n        form={form}\n        name='customShipping'\n        label='Use a different shipping address'\n        formProps={{\n          listeners: {\n            onChange: ({ value }) => {\n              if (!value) {\n                form.setFieldValue('shippingAddress', '');\n                form.setFieldValue('sameAsBilling', false);\n              }\n            },\n          },\n        }}\n      />\n\n      {customShipping && (\n        <div className='space-y-4 pl-6 border-l-2'>\n          <CheckboxField\n            form={form}\n            name='sameAsBilling'\n            label='Same as billing address'\n            formProps={{\n              listeners: {\n                onChange: ({ value }) => {\n                  if (!value) {\n                    form.setFieldValue('shippingAddress', '');\n                  } else {\n                    form.setFieldValue('shippingAddress', form.getFieldValue('billingAddress'));\n                  }\n                },\n              },\n            }}\n          />\n\n          <InputField\n            form={form}\n            name='shippingAddress'\n            label='Shipping Address'\n            props={{ disabled: sameAsBilling }}\n            formProps={{\n              validators: {\n                onChange: ({ value }) => {\n                  if (!value && customShipping) return 'Shipping address is required';\n                  return undefined;\n                },\n              },\n            }}\n          />\n        </div>\n      )}\n\n      <SubmitButton form={form}>Submit Order</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-checkbox-field.dependent-fields.tsx')),
  },
  'tsf-radio-field.example': {
    path: '#/examples/tsf-radio-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { RadioField } from '@/components/ui/shuip/tanstack-form/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfRadioFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      plan: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <RadioField\n        form={form}\n        name='plan'\n        options={[\n          { label: 'Free', value: 'free' },\n          { label: 'Pro', value: 'pro' },\n          { label: 'Enterprise', value: 'enterprise' },\n        ]}\n        label='Subscription Plan'\n        description='Choose your subscription plan'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a plan' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-radio-field.tsx')),
  },
  'tsf-input-field.nested-path.example': {
    path: '#/examples/tsf-input-field.nested-path.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\ntype UserProfile = {\n  user: {\n    email: string;\n    profile: {\n      firstName: string;\n      lastName: string;\n      bio: string;\n    };\n    address: {\n      street: string;\n      city: string;\n      zipCode: string;\n    };\n  };\n};\n\nexport default function TsfInputFieldNestedPathExample() {\n  const form = useForm<UserProfile>({\n    defaultValues: {\n      user: {\n        email: '',\n        profile: {\n          firstName: '',\n          lastName: '',\n          bio: '',\n        },\n        address: {\n          street: '',\n          city: '',\n          zipCode: '',\n        },\n      },\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-6'\n    >\n      <div className='space-y-4'>\n        <h3 className='text-lg font-semibold'>Account</h3>\n        <InputField\n          form={form}\n          name='user.email'\n          label='Email Address'\n          props={{ type: 'email' }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Email is required';\n                if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'Invalid email format';\n                return undefined;\n              },\n            },\n          }}\n        />\n      </div>\n\n      <div className='space-y-4'>\n        <h3 className='text-lg font-semibold'>Profile</h3>\n        <div className='grid grid-cols-2 gap-4'>\n          <InputField\n            form={form}\n            name='user.profile.firstName'\n            label='First Name'\n            formProps={{\n              validators: {\n                onChange: ({ value }) => (!value ? 'First name is required' : undefined),\n              },\n            }}\n          />\n          <InputField\n            form={form}\n            name='user.profile.lastName'\n            label='Last Name'\n            formProps={{\n              validators: {\n                onChange: ({ value }) => (!value ? 'Last name is required' : undefined),\n              },\n            }}\n          />\n        </div>\n        <InputField\n          form={form}\n          name='user.profile.bio'\n          label='Bio'\n          description='Tell us about yourself'\n          props={{ placeholder: 'Software developer from...' }}\n        />\n      </div>\n\n      <div className='space-y-4'>\n        <h3 className='text-lg font-semibold'>Address</h3>\n        <InputField\n          form={form}\n          name='user.address.street'\n          label='Street Address'\n          formProps={{\n            validators: {\n              onChange: ({ value }) => (!value ? 'Street address is required' : undefined),\n            },\n          }}\n        />\n        <div className='grid grid-cols-2 gap-4'>\n          <InputField form={form} name='user.address.city' label='City' />\n          <InputField\n            form={form}\n            name='user.address.zipCode'\n            label='ZIP Code'\n            props={{ placeholder: '12345' }}\n            formProps={{\n              validators: {\n                onChange: ({ value }) => {\n                  if (!value) return undefined;\n                  if (!/^\\d{5}(-\\d{4})?$/.test(value)) return 'Invalid ZIP code format';\n                  return undefined;\n                },\n              },\n            }}\n          />\n        </div>\n      </div>\n\n      <SubmitButton form={form}>Save Profile</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-input-field.nested-path.tsx')),
  },
  'tsf-select-field.conditional.example': {
    path: '#/examples/tsf-select-field.conditional.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SelectField } from '@/components/ui/shuip/tanstack-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfSelectFieldConditionalExample() {\n  const form = useForm({\n    defaultValues: {\n      accountType: '',\n      businessName: '',\n      companySize: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const accountType = useStore(form.store, (state) => state.values.accountType);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <SelectField\n        form={form}\n        name='accountType'\n        options={{\n          Personal: 'personal',\n          Business: 'business',\n        }}\n        label='Account Type'\n        placeholder='Select account type'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select an account type' : undefined),\n          },\n        }}\n      />\n\n      {/* Show business fields only when Business is selected */}\n      {accountType === 'business' && (\n        <>\n          <InputField\n            form={form}\n            name='businessName'\n            label='Business Name'\n            formProps={{\n              validators: {\n                onChange: ({ value }) => (!value ? 'Business name is required' : undefined),\n              },\n            }}\n          />\n\n          <SelectField\n            form={form}\n            name='companySize'\n            options={{\n              '1-10 employees': '1-10',\n              '11-50 employees': '11-50',\n              '51-200 employees': '51-200',\n              '201-1000 employees': '201-1000',\n              '1000+ employees': '1000+',\n            }}\n            label='Company Size'\n            placeholder='Select company size'\n            formProps={{\n              validators: {\n                onChange: ({ value }) => (!value ? 'Please select company size' : undefined),\n              },\n            }}\n          />\n        </>\n      )}\n\n      <SubmitButton form={form}>Create Account</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-select-field.conditional.tsx')),
  },
  'tsf-select-field.example': {
    path: '#/examples/tsf-select-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { SelectField } from '@/components/ui/shuip/tanstack-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfSelectFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      country: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <SelectField\n        form={form}\n        name='country'\n        options={{\n          'United States': 'us',\n          'United Kingdom': 'uk',\n          France: 'fr',\n          Germany: 'de',\n        }}\n        label='Country'\n        placeholder='Select a country'\n        description='Choose your country'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a country' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-select-field.tsx')),
  },
  'confirmation-dialog.example': {
    path: '#/examples/confirmation-dialog.tsx',
    code: "import { Button } from '@/components/ui/button';\nimport { ConfirmationDialog } from '@/components/ui/shuip/confirmation-dialog';\n\nexport default function ConfirmationDialogExample() {\n  return (\n    <ConfirmationDialog\n      trigger={<Button>Open confirmation dialog</Button>}\n      title='Confirmation Dialog'\n      description='Are you sure you want to make this action?'\n      labelConfirmButton='Make it'\n      onConfirm={() => alert('Confirmed')}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/examples/confirmation-dialog.tsx')),
  },
  'hover-reveal.example': {
    path: '#/examples/hover-reveal.tsx',
    code: "import { HoverReveal } from '@/components/ui/shuip/hover-reveal';\n\nexport default function HoverRevealExample() {\n  return <HoverReveal content={'Description'}>Hover me</HoverReveal>;\n}\n",
    component: React.lazy(() => import('#/examples/hover-reveal.tsx')),
  },
  'rhf-utils.example': {
    path: '#/examples/rhf-utils.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/react-hook-form/input-field';\nimport { RadioField } from '@/components/ui/shuip/react-hook-form/radio-field';\nimport { SelectField } from '@/components/ui/shuip/react-hook-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\nimport { getChangedFields, getZodDefaultValues } from '@/lib/shuip/rhf-utils';\n\nconst zodSchema = z.object({\n  name: z.string(),\n  age: z.number(),\n  createdAt: z.date().optional(),\n  address: z.object({\n    street: z.string().optional(),\n    city: z.string().optional(),\n    state: z.string().optional(),\n    zip: z.number().optional(),\n  }),\n  role: z.enum(['admin', 'user']).optional(),\n  status: z.enum(['ACTIVE', 'INACTIVE']).optional(),\n});\n\ntype MyZodSchema = z.infer<typeof zodSchema>;\n\nexport default function FormUtilsExample() {\n  const [changedFields, setChangedFields] = React.useState<Partial<MyZodSchema>>();\n\n  const form = useForm<z.infer<typeof zodSchema>>({\n    resolver: zodResolver(zodSchema),\n    defaultValues: getZodDefaultValues(zodSchema, {\n      name: 'John Doe',\n      age: 25,\n      status: 'INACTIVE',\n    }),\n  });\n\n  const handleSubmit = (data: MyZodSchema) => {\n    const changed = getChangedFields(form.formState.defaultValues, data);\n    setChangedFields(changed as Partial<MyZodSchema>);\n    form.reset(data);\n  };\n\n  return (\n    <div className='space-y-4 w-full'>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className='grid lg:grid-cols-2 gap-4'>\n          <InputField register={form.register('name')} label='name' placeholder='Your Name' />\n          <InputField register={form.register('age')} type='number' name='age' label='age' placeholder='Your Age' />\n          <RadioField register={form.register('role')} label='role' options={['admin', 'user']} />\n          <SelectField\n            register={form.register('status')}\n            label='status'\n            options={{\n              active: 'ACTIVE',\n              inactive: 'INACTIVE',\n            }}\n          />\n          <InputField\n            register={form.register('createdAt')}\n            type='date'\n            name='createdAt'\n            label='createdAt'\n            placeholder='Your Created At'\n          />\n          <InputField register={form.register('address.street')} label='address.street' placeholder='Your Street' />\n          <InputField register={form.register('address.city')} label='address.city' placeholder='Your City' />\n          <InputField register={form.register('address.zip')} label='address.zip' placeholder='Your Zip' />\n          <InputField register={form.register('address.state')} label='address.state' placeholder='Your State' />\n\n          <SubmitButton\n            className='lg:col-span-2'\n            loading={form.formState.isSubmitting}\n            disabled={!form.formState.isDirty}\n          >\n            Submit\n          </SubmitButton>\n        </form>\n      </Form>\n      <div className='grid lg:grid-cols-2 gap-4'>\n        <pre className='border border-primary rounded-md p-4'>\n          <h3 className='text-primary'>Form Values</h3>\n          {JSON.stringify(form.getValues(), null, 2)}\n        </pre>\n        <pre className='border border-primary rounded-md p-4'>\n          <h3 className='text-primary'>Changed Fields</h3>\n          {JSON.stringify(changedFields, null, 2)}\n        </pre>\n      </div>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-utils.tsx')),
  },
  'rhf-checkbox-field.box-label.example': {
    path: '#/examples/rhf-checkbox-field.box-label.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport CheckboxField from '@/components/ui/shuip/react-hook-form/checkbox-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst zodSchema = z.object({\n  checkbox: z.boolean(),\n});\n\nexport default function CheckboxFieldExample() {\n  const form = useForm({\n    defaultValues: { checkbox: false },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Checkbox: ${values}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <CheckboxField\n          register={form.register('checkbox')}\n          label='Checkbox'\n          description='Your checkbox'\n          boxLabel='Box description'\n        />\n        <SubmitButton>Submit</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-checkbox-field.box-label.tsx')),
  },
  'tsf-radio-field.payment-method.example': {
    path: '#/examples/tsf-radio-field.payment-method.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { RadioField } from '@/components/ui/shuip/tanstack-form/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfRadioFieldPaymentMethodExample() {\n  const form = useForm({\n    defaultValues: {\n      paymentMethod: '',\n      cardNumber: '',\n      paypalEmail: '',\n      accountNumber: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const paymentMethod = useStore(form.store, (state) => state.values.paymentMethod);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <RadioField\n        form={form}\n        name='paymentMethod'\n        options={[\n          { label: 'Credit Card', value: 'card' },\n          { label: 'PayPal', value: 'paypal' },\n          { label: 'Bank Transfer', value: 'bank' },\n        ]}\n        label='Payment Method'\n        description='Select how you want to pay'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a payment method' : undefined),\n          },\n        }}\n      />\n\n      {paymentMethod === 'card' && (\n        <InputField\n          form={form}\n          name='cardNumber'\n          label='Card Number'\n          props={{ placeholder: '1234 5678 9012 3456' }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Card number is required';\n                if (!/^\\d{4}\\s?\\d{4}\\s?\\d{4}\\s?\\d{4}$/.test(value)) return 'Invalid card number format';\n                return undefined;\n              },\n            },\n          }}\n        />\n      )}\n\n      {paymentMethod === 'paypal' && (\n        <InputField\n          form={form}\n          name='paypalEmail'\n          label='PayPal Email'\n          props={{ type: 'email', placeholder: 'your@email.com' }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Email is required';\n                if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'Invalid email format';\n                return undefined;\n              },\n            },\n          }}\n        />\n      )}\n\n      {paymentMethod === 'bank' && (\n        <InputField\n          form={form}\n          name='accountNumber'\n          label='Account Number'\n          props={{ placeholder: 'Enter your account number' }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Account number is required';\n                if (value.length < 8) return 'Account number must be at least 8 digits';\n                return undefined;\n              },\n            },\n          }}\n        />\n      )}\n\n      <SubmitButton form={form}>Process Payment</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-radio-field.payment-method.tsx')),
  },
  'theme-button.example': {
    path: '#/examples/theme-button.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonExample() {\n  return <ThemeButton />;\n}\n",
    component: React.lazy(() => import('#/examples/theme-button.tsx')),
  },
  'tsf-password-field.strength-meter.example': {
    path: '#/examples/tsf-password-field.strength-meter.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { PasswordField } from '@/components/ui/shuip/tanstack-form/password-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\nimport { cn } from '@/lib/utils';\n\n// Calculate password strength score (0-4)\nfunction calculatePasswordStrength(password: string): number {\n  let strength = 0;\n\n  if (password.length >= 8) strength++;\n  if (password.length >= 12) strength++;\n  if (/[a-z]/.test(password) && /[A-Z]/.test(password)) strength++;\n  if (/[0-9]/.test(password)) strength++;\n  if (/[!@#$%^&*(),.?\":{}|<>]/.test(password)) strength++;\n\n  return Math.min(strength, 4);\n}\n\nfunction getStrengthLabel(strength: number): { label: string; color: string } {\n  const labels = [\n    { label: 'Very Weak', color: 'bg-red-500' },\n    { label: 'Weak', color: 'bg-orange-500' },\n    { label: 'Fair', color: 'bg-yellow-500' },\n    { label: 'Good', color: 'bg-lime-500' },\n    { label: 'Strong', color: 'bg-green-500' },\n  ];\n  return labels[strength] || labels[0];\n}\n\nexport default function TsfPasswordFieldStrengthMeterExample() {\n  const form = useForm({\n    defaultValues: {\n      password: '',\n      confirmPassword: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  // Subscribe to password value changes\n  const password = useStore(form.store, (state) => state.values.password);\n  const strength = password ? calculatePasswordStrength(password) : 0;\n  const { label, color } = getStrengthLabel(strength);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <div className='space-y-2'>\n        <PasswordField\n          form={form}\n          name='password'\n          label='Password'\n          tooltip={\n            <div className='space-y-1'>\n              <p className='font-semibold'>Password must contain:</p>\n              <ul className='list-disc list-inside text-sm space-y-0.5'>\n                <li>At least 8 characters (12+ recommended)</li>\n                <li>Uppercase and lowercase letters</li>\n                <li>At least one number</li>\n                <li>At least one special character</li>\n              </ul>\n            </div>\n          }\n          props={{ placeholder: 'Enter password' }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Password is required';\n                if (value.length < 8) return 'Password must be at least 8 characters';\n                if (!/[A-Z]/.test(value)) return 'Must include uppercase letter';\n                if (!/[a-z]/.test(value)) return 'Must include lowercase letter';\n                if (!/[0-9]/.test(value)) return 'Must include number';\n                if (!/[!@#$%^&*(),.?\":{}|<>]/.test(value)) return 'Must include special character';\n                return undefined;\n              },\n            },\n          }}\n        />\n\n        {/* Strength meter */}\n        {password && (\n          <div className='space-y-1.5'>\n            <div className='flex gap-1'>\n              {[...Array(4)].map((_, i) => (\n                <div\n                  key={i}\n                  className={cn('h-1 flex-1 rounded-full transition-colors', i < strength ? color : 'bg-muted')}\n                />\n              ))}\n            </div>\n            <p className='text-sm text-muted-foreground'>\n              Strength: <span className='font-medium'>{label}</span>\n            </p>\n          </div>\n        )}\n      </div>\n\n      <PasswordField\n        form={form}\n        name='confirmPassword'\n        label='Confirm Password'\n        props={{ placeholder: 'Re-enter password' }}\n        formProps={{\n          validators: {\n            onChangeListenTo: ['password'],\n            onChange: ({ value, fieldApi }) => {\n              const pwd = fieldApi.form.getFieldValue('password');\n              if (!value) return 'Please confirm your password';\n              if (value !== pwd) return 'Passwords do not match';\n              return undefined;\n            },\n          },\n        }}\n      />\n\n      <SubmitButton form={form}>Create Account</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-password-field.strength-meter.tsx')),
  },
  'side-dialog.example': {
    path: '#/examples/side-dialog.tsx',
    code: "'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  SideDialog,\n  SideDialogClose,\n  SideDialogContent,\n  SideDialogDescription,\n  SideDialogFooter,\n  SideDialogHeader,\n  SideDialogTitle,\n  SideDialogTrigger,\n} from '@/components/ui/shuip/side-dialog';\n\nexport default function SideDialogExample() {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <div className='flex flex-wrap gap-4 p-8'>\n      <SideDialog open={open} onOpenChange={setOpen}>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Open Dialog (Bottom Right)</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Side Dialog Example</SideDialogTitle>\n            <SideDialogDescription>\n              This is a side dialog that opens on the bottom right by default. On mobile devices, it automatically\n              becomes a drawer.\n            </SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm text-muted-foreground'>\n              Content goes here. This dialog is responsive and will adapt to mobile devices by showing as a drawer\n              instead.\n            </p>\n          </div>\n          <SideDialogFooter>\n            <SideDialogClose asChild>\n              <Button variant='outline'>Cancel</Button>\n            </SideDialogClose>\n            <Button>Save changes</Button>\n          </SideDialogFooter>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='top-left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Top Left</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Top Left Dialog</SideDialogTitle>\n            <SideDialogDescription>This dialog opens from the top left corner.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>Perfect for notifications or quick actions.</p>\n          </div>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='top-right'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Top Right</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Top Right Dialog</SideDialogTitle>\n            <SideDialogDescription>This dialog opens from the top right corner.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>Great for user menus or profile settings.</p>\n          </div>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='bottom-left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Bottom Left</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Bottom Left Dialog</SideDialogTitle>\n            <SideDialogDescription>This dialog opens from the bottom left corner.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>Ideal for help or support content.</p>\n          </div>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Left Side</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Left Side Dialog</SideDialogTitle>\n            <SideDialogDescription>This dialog opens from the left side, centered vertically.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>Perfect for navigation or filters.</p>\n          </div>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='right'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Right Side</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>Right Side Dialog</SideDialogTitle>\n            <SideDialogDescription>This dialog opens from the right side, centered vertically.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>Great for sidebars or additional information.</p>\n          </div>\n          <SideDialogFooter>\n            <SideDialogClose asChild>\n              <Button variant='outline'>Close</Button>\n            </SideDialogClose>\n          </SideDialogFooter>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>No Close Button</Button>\n        </SideDialogTrigger>\n        <SideDialogContent showCloseButton={false}>\n          <SideDialogHeader>\n            <SideDialogTitle>Custom Close</SideDialogTitle>\n            <SideDialogDescription>This dialog doesn't show the default close button.</SideDialogDescription>\n          </SideDialogHeader>\n          <div className='py-4'>\n            <p className='text-sm'>You can control closing with custom buttons only.</p>\n          </div>\n          <SideDialogFooter>\n            <SideDialogClose asChild>\n              <Button>Done</Button>\n            </SideDialogClose>\n          </SideDialogFooter>\n        </SideDialogContent>\n      </SideDialog>\n\n      {/* Different Sizes */}\n      <SideDialog size='xs'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Extra Small (xs)</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>XS Size</SideDialogTitle>\n            <SideDialogDescription>Extra small dialog size (320px max).</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog size='md' position='top-left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Medium (md)</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>MD Size</SideDialogTitle>\n            <SideDialogDescription>Medium dialog size (448px max).</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog size='xl' position='left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Extra Large (xl)</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>XL Size</SideDialogTitle>\n            <SideDialogDescription>Extra large dialog size (576px max).</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog size='2xl' position='bottom-left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>2XL Size</Button>\n        </SideDialogTrigger>\n        <SideDialogContent>\n          <SideDialogHeader>\n            <SideDialogTitle>2XL Size</SideDialogTitle>\n            <SideDialogDescription>Extra extra large dialog size (672px max).</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='right'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>Custom 400px</Button>\n        </SideDialogTrigger>\n        <SideDialogContent className='w-full max-w-[min(400px,calc(100vw-2rem))]'>\n          <SideDialogHeader>\n            <SideDialogTitle>Custom Size</SideDialogTitle>\n            <SideDialogDescription>Custom size of 400px with responsive constraints.</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog position='bottom-left'>\n        <SideDialogTrigger asChild>\n          <Button variant='outline'>50% Viewport</Button>\n        </SideDialogTrigger>\n        <SideDialogContent className='w-full max-w-[min(50vw,calc(100vw-2rem))]'>\n          <SideDialogHeader>\n            <SideDialogTitle>Viewport Size</SideDialogTitle>\n            <SideDialogDescription>50% of viewport width with responsive constraints.</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n\n      <SideDialog>\n        <SideDialogTrigger asChild>\n          <Button variant='outline' className='bg-gradient-to-r from-blue-300 to-purple-300'>\n            Colored\n          </Button>\n        </SideDialogTrigger>\n        <SideDialogContent className='bg-gradient-to-r from-blue-300 to-purple-300'>\n          <SideDialogHeader>\n            <SideDialogTitle>Colored</SideDialogTitle>\n            <SideDialogDescription>Colored dialog.</SideDialogDescription>\n          </SideDialogHeader>\n        </SideDialogContent>\n      </SideDialog>\n    </div>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/side-dialog.tsx')),
  },
  'rhf-input-field.example': {
    path: '#/examples/rhf-input-field.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/react-hook-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst zodSchema = z.object({\n  name: z.string().nonempty({ message: 'Name is required' }),\n});\n\nexport default function InputFieldExample() {\n  const form = useForm({\n    defaultValues: { name: '' },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Hello ${values.name}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <InputField register={form.register('name')} label='Name' description='Your name' placeholder='John' />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-input-field.tsx')),
  },
  'tsf-checkbox-field.example': {
    path: '#/examples/tsf-checkbox-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { CheckboxField } from '@/components/ui/shuip/tanstack-form/checkbox-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfCheckboxFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      termsExample: false,\n      marketingExample: false,\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <CheckboxField\n        form={form}\n        name='termsExample'\n        label='I accept the terms and conditions'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'You must accept the terms and conditions' : undefined),\n          },\n        }}\n      />\n\n      <CheckboxField\n        form={form}\n        name='marketingExample'\n        label='Send me promotional emails'\n        description='Optional: Receive updates about new features'\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-checkbox-field.tsx')),
  },
  'rhf-select-field.example': {
    path: '#/examples/rhf-select-field.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport { SelectField, type SelectFieldOption } from '@/components/ui/shuip/react-hook-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst options: SelectFieldOption = {\n  First: '1',\n  Second: '2',\n  Third: '3',\n  Fourth: '4',\n};\n\nconst zodSchema = z.object({\n  selection: z.enum(Object.values(options) as [string]),\n});\n\nexport default function SelectFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: '1',\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <SelectField\n          register={form.register('selection')}\n          placeholder='Select an option'\n          label='selection'\n          options={options}\n          defaultValue={'3'}\n        />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-select-field.tsx')),
  },
  'tsf-textarea-field.example': {
    path: '#/examples/tsf-textarea-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { TextareaField } from '@/components/ui/shuip/tanstack-form/textarea-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfTextareaFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      bio: '',\n      feedback: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <TextareaField\n        form={form}\n        name='bio'\n        label='Biography'\n        description='Tell us about yourself'\n        props={{ rows: 4, placeholder: 'Software engineer passionate about...' }}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => {\n              if (!value) return 'Bio is required';\n              if (value.length < 20) return 'Bio must be at least 20 characters';\n              return undefined;\n            },\n          },\n        }}\n      />\n\n      <TextareaField\n        form={form}\n        name='feedback'\n        label='Feedback'\n        description='Share your thoughts or suggestions'\n        props={{ rows: 6, placeholder: 'Your feedback helps us improve...' }}\n      />\n\n      <SubmitButton form={form}>Submit</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-textarea-field.tsx')),
  },
  'responsive-dialog.example': {
    path: '#/examples/responsive-dialog.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport z from 'zod';\nimport {\n  ResponsiveDialog,\n  ResponsiveDialogClose,\n  ResponsiveDialogContent,\n  ResponsiveDialogDescription,\n  ResponsiveDialogFooter,\n  ResponsiveDialogHeader,\n  ResponsiveDialogTitle,\n  ResponsiveDialogTrigger,\n} from '@/components/block/shuip/responsive-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Form } from '@/components/ui/form';\nimport { InputField } from '@/components/ui/shuip/react-hook-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function ResponsiveDialogExample() {\n  return (\n    <div className='space-y-4'>\n      <h3 className='text-lg font-semibold'>Basic Responsive Dialog</h3>\n      <div className='flex flex-wrap gap-2'>\n        <ResponsiveDialog>\n          <ResponsiveDialogTrigger asChild>\n            <Button variant='outline'>Open Dialog</Button>\n          </ResponsiveDialogTrigger>\n          <ResponsiveDialogContent>\n            <ResponsiveDialogHeader>\n              <ResponsiveDialogTitle>Responsive Dialog</ResponsiveDialogTitle>\n              <ResponsiveDialogDescription>\n                This dialog adapts to your screen size. On desktop, it's a side dialog. On mobile, it's a drawer.\n              </ResponsiveDialogDescription>\n            </ResponsiveDialogHeader>\n            <div className='p-4'>\n              <p className='text-sm text-muted-foreground'>\n                Try resizing your browser window or switching to mobile view to see the responsive behavior.\n              </p>\n            </div>\n            <ResponsiveDialogFooter>\n              <ResponsiveDialogClose asChild>\n                <Button variant='outline'>Close</Button>\n              </ResponsiveDialogClose>\n              <Button>Continue</Button>\n            </ResponsiveDialogFooter>\n          </ResponsiveDialogContent>\n        </ResponsiveDialog>\n      </div>\n\n      <div className='space-y-2'>\n        <h3 className='text-lg font-semibold'>Different Positions (Desktop only)</h3>\n        <div className='flex flex-wrap gap-2'>\n          <ResponsiveDialog position='top-left'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Top Left</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Top Left Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at top left on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog position='top-right'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Top Right</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Top Right Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at top right on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog position='bottom-left'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Bottom Left</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Bottom Left Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at bottom left on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog position='bottom-right'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Bottom Right</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Bottom Right Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at bottom right on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog position='left'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Left</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Left Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at left side on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog position='right'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Right</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Right Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Positioned at right side on desktop.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n        </div>\n      </div>\n\n      <div className='space-y-2'>\n        <h3 className='text-lg font-semibold'>Different Sizes (Desktop only)</h3>\n        <div className='flex flex-wrap gap-2'>\n          <ResponsiveDialog size='xs'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Extra Small</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>XS Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Extra small dialog size.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog size='sm'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Small</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Small Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Small dialog size (default).</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog size='md'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Medium</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Medium Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Medium dialog size.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog size='lg'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Large</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Large Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Large dialog size for more content.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog size='xl'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Extra Large</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>XL Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>Extra large dialog size.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog size='2xl'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>2X Large</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>2XL Dialog</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>2X large dialog size for extensive content.</ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n        </div>\n      </div>\n\n      <div className='space-y-2'>\n        <h3 className='text-lg font-semibold'>Custom Breakpoints</h3>\n        <div className='flex flex-wrap gap-2'>\n          <ResponsiveDialog breakpoint='sm'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Breakpoint SM (640px)</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Small Breakpoint</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>\n                  This dialog switches to mobile mode at 640px and below.\n                </ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog breakpoint='md'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Breakpoint MD (768px)</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Medium Breakpoint</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>\n                  This dialog switches to mobile mode at 768px and below (default).\n                </ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog breakpoint='lg'>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Breakpoint LG (1024px)</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Large Breakpoint</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>\n                  This dialog switches to mobile mode at 1024px and below.\n                </ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n\n          <ResponsiveDialog breakpoint={900}>\n            <ResponsiveDialogTrigger asChild>\n              <Button variant='outline'>Custom 900px</Button>\n            </ResponsiveDialogTrigger>\n            <ResponsiveDialogContent>\n              <ResponsiveDialogHeader>\n                <ResponsiveDialogTitle>Custom Breakpoint</ResponsiveDialogTitle>\n                <ResponsiveDialogDescription>\n                  This dialog switches to mobile mode at exactly 900px and below.\n                </ResponsiveDialogDescription>\n              </ResponsiveDialogHeader>\n            </ResponsiveDialogContent>\n          </ResponsiveDialog>\n        </div>\n      </div>\n\n      <h3 className='text-lg font-semibold'>Form Example</h3>\n\n      <ResponsiveDialogFormExample />\n    </div>\n  );\n}\n\nconst formSchema = z.object({\n  name: z.string().min(1),\n  email: z.string().email(),\n});\n\nfunction ResponsiveDialogFormExample() {\n  const [open, setOpen] = React.useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n  });\n\n  const onSubmit = async (data: z.infer<typeof formSchema>) => {\n    alert(JSON.stringify(data));\n    setOpen(false);\n    form.reset();\n  };\n\n  return (\n    <ResponsiveDialog open={open} onOpenChange={setOpen}>\n      <ResponsiveDialogTrigger asChild>\n        <Button variant='outline'>Open Dialog</Button>\n      </ResponsiveDialogTrigger>\n      <ResponsiveDialogContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)}>\n            <ResponsiveDialogHeader>\n              <ResponsiveDialogTitle>Responsive Dialog</ResponsiveDialogTitle>\n              <ResponsiveDialogDescription>\n                This dialog adapts to your screen size. On desktop, it's a side dialog. On mobile, it's a drawer.\n              </ResponsiveDialogDescription>\n            </ResponsiveDialogHeader>\n            <div className='space-y-4 px-4'>\n              <InputField register={form.register('name')} name='name' label='Name' />\n              <InputField register={form.register('email')} name='email' label='Email' />\n            </div>\n            <ResponsiveDialogFooter>\n              <ResponsiveDialogClose asChild>\n                <Button variant='outline'>Close</Button>\n              </ResponsiveDialogClose>\n              <SubmitButton className='max-md:w-full'>Submit</SubmitButton>\n            </ResponsiveDialogFooter>\n          </form>\n        </Form>\n      </ResponsiveDialogContent>\n    </ResponsiveDialog>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/responsive-dialog.tsx')),
  },
  'tsf-textarea-field.character-count.example': {
    path: '#/examples/tsf-textarea-field.character-count.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\nimport { TextareaField } from '@/components/ui/shuip/tanstack-form/textarea-field';\n\nconst MAX_LENGTH = 280;\n\nexport default function TsfTextareaFieldCharacterCountExample() {\n  const form = useForm({\n    defaultValues: {\n      tweet: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const tweet = useStore(form.store, (state) => state.values.tweet);\n  const remaining = MAX_LENGTH - tweet.length;\n  const isNearLimit = remaining < 50;\n  const isOverLimit = remaining < 0;\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4 w-full max-w-lg'\n    >\n      <div className='space-y-2'>\n        <TextareaField\n          form={form}\n          name='tweet'\n          label='Tweet'\n          props={{\n            rows: 4,\n            maxLength: MAX_LENGTH,\n            placeholder: \"What's happening?\",\n          }}\n          formProps={{\n            validators: {\n              onChange: ({ value }) => {\n                if (!value) return 'Tweet cannot be empty';\n                if (value.length > MAX_LENGTH) return `Tweet is too long (max ${MAX_LENGTH} characters)`;\n                return undefined;\n              },\n            },\n          }}\n        />\n\n        <div className='flex justify-between text-sm'>\n          <span className='text-muted-foreground'>\n            {tweet.length} / {MAX_LENGTH} characters\n          </span>\n          <span\n            className={`font-medium ${\n              isOverLimit ? 'text-destructive' : isNearLimit ? 'text-orange-500' : 'text-muted-foreground'\n            }`}\n          >\n            {remaining} remaining\n          </span>\n        </div>\n      </div>\n\n      <SubmitButton form={form}>Post Tweet</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-textarea-field.character-count.tsx')),
  },
  'submit-button.loading.example': {
    path: '#/examples/submit-button.loading.tsx',
    code: "import { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nexport default function SubmitButtonLoadingExample() {\n  return <SubmitButton loading={true}>Submit</SubmitButton>;\n}\n",
    component: React.lazy(() => import('#/examples/submit-button.loading.tsx')),
  },
  'copy-button.example': {
    path: '#/examples/copy-button.tsx',
    code: "'use client';\n\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\n\nexport default function CopyButtonExample() {\n  return <CopyButton value='Hello, world!' />;\n}\n",
    component: React.lazy(() => import('#/examples/copy-button.tsx')),
  },
  'tsf-textarea-field.markdown-preview.example': {
    path: '#/examples/tsf-textarea-field.markdown-preview.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { Card } from '@/components/ui/card';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\nimport { TextareaField } from '@/components/ui/shuip/tanstack-form/textarea-field';\n\nexport default function TsfTextareaFieldMarkdownPreviewExample() {\n  const form = useForm({\n    defaultValues: {\n      content: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const content = useStore(form.store, (state) => state.values.content);\n  const htmlContent = parseMarkdown(content);\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <div className='flex max-md:flex-col items-center gap-4 w-full'>\n        <div className='mt-4'>\n          <TextareaField\n            form={form}\n            name='content'\n            label='Content'\n            description='Supports basic Markdown formatting'\n            tooltip={\n              <div className='space-y-1 text-sm'>\n                <p className='font-semibold'>Markdown syntax:</p>\n                <p># Heading 1</p>\n                <p>## Heading 2</p>\n                <p>**bold** *italic*</p>\n                <p>`code`</p>\n                <p>- List item</p>\n              </div>\n            }\n            props={{\n              rows: 12,\n              placeholder: '# My Article\\n\\nWrite your content here...',\n              className: 'min-h-[300px]',\n            }}\n            formProps={{\n              validators: {\n                onChange: ({ value }) => {\n                  if (!value) return 'Content is required';\n                  if (value.length < 10) return 'Content must be at least 10 characters';\n                  return undefined;\n                },\n              },\n            }}\n          />\n        </div>\n\n        <Card className='p-4 min-h-[300px]'>\n          {content ? (\n            // biome-ignore lint/security/noDangerouslySetInnerHtml: <explanation>\n            <div className='prose prose-sm max-w-none' dangerouslySetInnerHTML={{ __html: htmlContent }} />\n          ) : (\n            <p className='text-muted-foreground'>Nothing to preview yet. Write some content to see the preview.</p>\n          )}\n        </Card>\n      </div>\n\n      <SubmitButton form={form}>Publish Article</SubmitButton>\n    </form>\n  );\n}\n\nfunction parseMarkdown(text: string): string {\n  return text\n    .split('\\n')\n    .map((line) => {\n      if (line.startsWith('### ')) return `<h3 class=\"text-lg font-semibold mb-2\">${line.slice(4)}</h3>`;\n      if (line.startsWith('## ')) return `<h2 class=\"text-xl font-semibold mb-2\">${line.slice(3)}</h2>`;\n      if (line.startsWith('# ')) return `<h1 class=\"text-2xl font-bold mb-2\">${line.slice(2)}</h1>`;\n      if (line.startsWith('- ')) return `<li class=\"ml-4\">${line.slice(2)}</li>`;\n\n      line = line.replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>');\n      line = line.replace(/\\*(.*?)\\*/g, '<em>$1</em>');\n      line = line.replace(/`(.*?)`/g, '<code class=\"bg-muted px-1 rounded\">$1</code>');\n\n      return line ? `<p class=\"mb-2\">${line}</p>` : '<br>';\n    })\n    .join('\\n');\n}\n",
    component: React.lazy(() => import('#/examples/tsf-textarea-field.markdown-preview.tsx')),
  },
  'tsf-password-field.confirm-password.example': {
    path: '#/examples/tsf-password-field.confirm-password.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { toast } from 'sonner';\nimport { PasswordField } from '@/components/ui/shuip/tanstack-form/password-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfPasswordFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      password: '',\n      confirmPassword: '',\n    },\n    validators: {\n      onSubmit: ({ value }) => {\n        return value.password !== value.confirmPassword ? 'Passwords do not match' : undefined;\n      },\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n    onSubmitInvalid({ formApi }) {\n      toast.error(formApi.state.errors.join(', '));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <PasswordField\n        form={form}\n        name='password'\n        label='Password'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (value.length < 8 ? 'Password must be at least 8 characters' : undefined),\n          },\n        }}\n      />\n\n      <PasswordField\n        form={form}\n        name='confirmPassword'\n        label='Confirm Password'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (value.length < 8 ? 'Password must be at least 8 characters' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-password-field.confirm-password.tsx')),
  },
  'tsf-input-field.example': {
    path: '#/examples/tsf-input-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfInputFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <InputField\n        form={form}\n        name='name'\n        label='Name'\n        description='Your full name'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (value.length < 3 ? 'Name must be at least 3 characters' : undefined),\n          },\n        }}\n      />\n\n      <InputField\n        form={form}\n        name='email'\n        label='Email'\n        props={{ type: 'email' }}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value.includes('@') ? 'Invalid email address' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form} props={{ variant: 'outline' }}>\n        Register\n      </SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-input-field.tsx')),
  },
  'tsf-password-field.tooltip.example': {
    path: '#/examples/tsf-password-field.tooltip.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { PasswordField } from '@/components/ui/shuip/tanstack-form/password-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfPasswordFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      password: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <PasswordField\n        form={form}\n        name='password'\n        label='Password'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (value.length < 8 ? 'Password must be at least 8 characters' : undefined),\n          },\n        }}\n        tooltip='Use a strong password with letters, numbers, and symbols'\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-password-field.tooltip.tsx')),
  },
  'tsf-radio-field.conditional-pricing.example': {
    path: '#/examples/tsf-radio-field.conditional-pricing.tsx',
    code: "'use client';\n\nimport { useForm, useStore } from '@tanstack/react-form';\nimport { Card } from '@/components/ui/card';\nimport { RadioField } from '@/components/ui/shuip/tanstack-form/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nconst PLANS = [\n  { label: 'Free - $0/month', value: 'free', price: 0 },\n  { label: 'Pro - $29/month', value: 'pro', price: 29 },\n  { label: 'Enterprise - $99/month', value: 'enterprise', price: 99 },\n];\n\nexport default function TsfRadioFieldConditionalPricingExample() {\n  const form = useForm({\n    defaultValues: {\n      plan: '',\n      billingCycle: 'monthly',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  const plan = useStore(form.store, (state) => state.values.plan);\n  const billingCycle = useStore(form.store, (state) => state.values.billingCycle);\n\n  const selectedPlan = PLANS.find((p) => p.value === plan);\n  const monthlyPrice = selectedPlan?.price || 0;\n  const annualPrice = monthlyPrice * 12 * 0.8; // 20% discount\n  const displayPrice = billingCycle === 'annual' ? annualPrice / 12 : monthlyPrice;\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <RadioField\n        form={form}\n        name='plan'\n        options={PLANS.map((p) => ({ label: p.label, value: p.value }))}\n        label='Select Plan'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a plan' : undefined),\n          },\n        }}\n      />\n\n      {plan && plan !== 'free' && (\n        <RadioField\n          form={form}\n          name='billingCycle'\n          options={[\n            { label: 'Monthly', value: 'monthly' },\n            { label: 'Annual (Save 20%)', value: 'annual' },\n          ]}\n          label='Billing Cycle'\n        />\n      )}\n\n      {plan && (\n        <Card className='p-4'>\n          <div className='space-y-2'>\n            <div className='flex justify-between'>\n              <span className='font-semibold'>Plan:</span>\n              <span className='capitalize'>{plan}</span>\n            </div>\n            {plan !== 'free' && (\n              <>\n                <div className='flex justify-between'>\n                  <span className='font-semibold'>Billing:</span>\n                  <span className='capitalize'>{billingCycle}</span>\n                </div>\n                <div className='flex justify-between text-lg font-bold'>\n                  <span>Total:</span>\n                  <span>${displayPrice.toFixed(2)}/month</span>\n                </div>\n                {billingCycle === 'annual' && (\n                  <p className='text-sm text-muted-foreground'>Billed annually at ${annualPrice.toFixed(2)}</p>\n                )}\n              </>\n            )}\n          </div>\n        </Card>\n      )}\n\n      <SubmitButton form={form}>Continue</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-radio-field.conditional-pricing.tsx')),
  },
  'title-section.example': {
    path: '#/examples/title-section.tsx',
    code: "import { TitleSection } from '@/components/block/shuip/title-section';\n\nexport default function TitleSectionExample() {\n  return <TitleSection title='Title' description='Lorem ipsum dolor sit amet consectetur, adipisicing elit.' />;\n}\n",
    component: React.lazy(() => import('#/examples/title-section.tsx')),
  },
  'query-boundary.example': {
    path: '#/examples/query-boundary.tsx',
    code: "/** biome-ignore-all lint/correctness/noUnreachable: ignore */\n'use client';\n\nimport { LoaderCircle } from 'lucide-react';\nimport { QueryBoundary } from '@/components/ui/shuip/query-boundary';\n\nexport default function QueryBoundaryExample() {\n  const queryKeys = ['data', Math.random().toString(36).substring(2, 15)];\n  return (\n    <div className='flex flex-col items-center justify-center gap-4'>\n      <QueryBoundary queryKeys={queryKeys} loadingFallback={<LoaderCircle className='animate-spin' />}>\n        <DataComponent />\n      </QueryBoundary>\n    </div>\n  );\n}\n\nfunction DataComponent() {\n  // const res = await fetch('https://api.example.com/data');\n  // const data = await res.json();\n  // if (data.error) {\n  // throw new Error('Error in DataComponent');\n  // }\n\n  return <div>DataComponent</div>;\n}\n",
    component: React.lazy(() => import('#/examples/query-boundary.tsx')),
  },
  'tsf-select-field.dependent.example': {
    path: '#/examples/tsf-select-field.dependent.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport React from 'react';\nimport { SelectField } from '@/components/ui/shuip/tanstack-form/select-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nconst COUNTRIES = {\n  'United States': 'us',\n  Canada: 'ca',\n  Mexico: 'mx',\n};\n\nconst STATES_BY_COUNTRY: Record<string, Record<string, string>> = {\n  us: {\n    California: 'ca',\n    Texas: 'tx',\n    'New York': 'ny',\n    Florida: 'fl',\n  },\n  ca: {\n    Ontario: 'on',\n    Quebec: 'qc',\n    'British Columbia': 'bc',\n    Alberta: 'ab',\n  },\n  mx: {\n    'Mexico City': 'cdmx',\n    Jalisco: 'jal',\n    'Nuevo LeÃ³n': 'nl',\n  },\n};\n\nexport default function TsfSelectFieldDependentExample() {\n  const [stateOptions, setStateOptions] = React.useState<Record<string, string>>({});\n\n  const form = useForm({\n    defaultValues: {\n      country: '',\n      state: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <SelectField\n        form={form}\n        name='country'\n        options={COUNTRIES}\n        label='Country'\n        placeholder='Select a country'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a country' : undefined),\n          },\n          listeners: {\n            onChange: ({ value }) => {\n              if (value && STATES_BY_COUNTRY[value]) {\n                setStateOptions(STATES_BY_COUNTRY[value]);\n              } else {\n                setStateOptions({});\n              }\n              // Reset state field when country changes\n              form.setFieldValue('state', '');\n            },\n          },\n        }}\n      />\n\n      <SelectField\n        form={form}\n        name='state'\n        options={stateOptions}\n        label='State / Province'\n        placeholder={Object.keys(stateOptions).length === 0 ? 'Select a country first' : 'Select a state'}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (!value ? 'Please select a state' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form}>Submit</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-select-field.dependent.tsx')),
  },
  'tsf-submit-button.example': {
    path: '#/examples/tsf-submit-button.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfSubmitButtonExample() {\n  const form = useForm({\n    defaultValues: {\n      email: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 2000));\n      alert(`Subscribed: ${value.email}`);\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4 max-w-md'\n    >\n      <InputField\n        form={form}\n        name='email'\n        label='Email'\n        description='Subscribe to our newsletter'\n        formProps={{\n          validators: {\n            onChange: ({ value }) =>\n              !value ? 'Email is required' : !value.includes('@') ? 'Invalid email' : undefined,\n          },\n        }}\n        props={{ type: 'email', placeholder: 'Email' }}\n      />\n\n      <SubmitButton form={form}>Subscribe</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-submit-button.tsx')),
  },
  'copy-button.with-custom-icons.example': {
    path: '#/examples/copy-button.with-custom-icons.tsx',
    code: "'use client';\n\nimport { Cat, Dog } from 'lucide-react';\nimport { CopyButton } from '@/components/ui/shuip/copy-button';\n\nexport default function CopyButtonWithCustomIconsExample() {\n  return (\n    <CopyButton\n      value='Hello, cat!'\n      copiedIcon={<Dog className='size-6' />}\n      notCopiedIcon={<Cat className='size-6' />}\n      className='size-8'\n      variant={'default'}\n    />\n  );\n}\n",
    component: React.lazy(() => import('#/examples/copy-button.with-custom-icons.tsx')),
  },
  'tsf-password-field.example': {
    path: '#/examples/tsf-password-field.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { PasswordField } from '@/components/ui/shuip/tanstack-form/password-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfPasswordFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      password: '',\n    },\n\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <PasswordField\n        form={form}\n        name='password'\n        label='Password'\n        formProps={{\n          validators: {\n            onChange: ({ value }) => (value.length < 8 ? 'Password must be at least 8 characters' : undefined),\n          },\n        }}\n      />\n\n      <SubmitButton form={form} />\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-password-field.tsx')),
  },
  'address-field.example': {
    path: '#/examples/address-field.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport { AddressField, addressSchema } from '@/components/ui/shuip/address-field';\nimport { InputField } from '@/components/ui/shuip/react-hook-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst zodSchema = z.object({\n  name: z.string(),\n  address: addressSchema,\n});\n\nexport default function AddressFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      name: 'John Doe',\n      address: {\n        street: '',\n        city: '',\n        postalCode: '',\n        country: '',\n        fullAddress: '',\n        placeId: '',\n      },\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Values: ${JSON.stringify(values, null, 2)}`);\n      form.reset();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4 w-full'>\n        <InputField register={form.register('name')} label='Name' placeholder='Enter your name' />\n        <AddressField register={form.register('address')} placeholder='Enter your address' className='w-full' />\n        <SubmitButton>Check</SubmitButton>\n\n        <pre className='border border-primary rounded-md p-4 overflow-x-auto'>\n          <h3 className='text-primary'>Form values</h3>\n          <pre>{JSON.stringify(form.watch(), null, 2)}</pre>\n        </pre>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/address-field.tsx')),
  },
  'tsf-input-field.tooltip.example': {
    path: '#/examples/tsf-input-field.tooltip.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\nexport default function TsfInputFieldTooltipExample() {\n  const form = useForm({\n    defaultValues: {\n      apiKey: '',\n      webhookUrl: '',\n      secretKey: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <InputField\n        form={form}\n        name='apiKey'\n        label='API Key'\n        description='Your application API key'\n        tooltip={\n          <>\n            <p className='font-semibold mb-1'>Where to find your API key:</p>\n            <ol className='list-decimal list-inside space-y-1 text-sm'>\n              <li>Go to Settings â API</li>\n              <li>Click \"Generate New Key\"</li>\n              <li>Copy the key (it will only be shown once)</li>\n            </ol>\n          </>\n        }\n        props={{ placeholder: 'sk_live_...' }}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => {\n              if (!value) return 'API key is required';\n              if (!value.startsWith('sk_')) return 'API key must start with sk_';\n              if (value.length < 20) return 'API key is too short';\n              return undefined;\n            },\n          },\n        }}\n      />\n\n      <InputField\n        form={form}\n        name='webhookUrl'\n        label='Webhook URL'\n        description='Endpoint to receive webhook events'\n        tooltip='This URL must be publicly accessible and accept POST requests. We recommend using HTTPS for security.'\n        props={{ type: 'url', placeholder: 'https://api.example.com/webhooks' }}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => {\n              if (!value) return 'Webhook URL is required';\n              if (!value.startsWith('https://')) return 'Webhook URL must use HTTPS';\n              try {\n                new URL(value);\n                return undefined;\n              } catch {\n                return 'Invalid URL format';\n              }\n            },\n          },\n        }}\n      />\n\n      <InputField\n        form={form}\n        name='secretKey'\n        label='Webhook Secret'\n        description='Used to verify webhook signatures'\n        tooltip='Keep this secret safe. It will be used to sign webhook payloads so you can verify their authenticity.'\n        props={{ placeholder: 'whsec_...' }}\n        formProps={{\n          validators: {\n            onChange: ({ value }) => {\n              if (!value) return 'Webhook secret is required';\n              if (value.length < 16) return 'Secret must be at least 16 characters';\n              return undefined;\n            },\n          },\n        }}\n      />\n\n      <SubmitButton form={form}>Save Configuration</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-input-field.tooltip.tsx')),
  },
  'theme-button.text.example': {
    path: '#/examples/theme-button.text.tsx',
    code: "import { ThemeButton } from '@/components/ui/shuip/theme-button';\n\nexport default function ThemeButtonTextExample() {\n  return <ThemeButton withText />;\n}\n",
    component: React.lazy(() => import('#/examples/theme-button.text.tsx')),
  },
  'rhf-radio-field.example': {
    path: '#/examples/rhf-radio-field.tsx',
    code: "'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useForm } from 'react-hook-form';\nimport { z } from 'zod';\nimport { Form } from '@/components/ui/form';\nimport { RadioField } from '@/components/ui/shuip/react-hook-form/radio-field';\nimport { SubmitButton } from '@/components/ui/shuip/submit-button';\n\nconst zodSchema = z.object({\n  selection: z.enum(['Yes', 'No', 'Maybe', 'Not sure']),\n});\n\nexport default function RadioFieldExample() {\n  const form = useForm({\n    defaultValues: {\n      selection: 'Yes' as const,\n    },\n    resolver: zodResolver(zodSchema),\n  });\n\n  async function onSubmit(values: z.infer<typeof zodSchema>) {\n    try {\n      alert(`Selection: ${values.selection}`);\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className='space-y-4'>\n        <RadioField\n          register={form.register('selection')}\n          options={['Yes', 'No', 'Maybe', 'Not sure']}\n          label='Are you sure?'\n          description='This is a description'\n        />\n        <SubmitButton>Check</SubmitButton>\n      </form>\n    </Form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/rhf-radio-field.tsx')),
  },
  'tsf-input-field.async-validation.example': {
    path: '#/examples/tsf-input-field.async-validation.tsx',
    code: "'use client';\n\nimport { useForm } from '@tanstack/react-form';\nimport { InputField } from '@/components/ui/shuip/tanstack-form/input-field';\nimport { SubmitButton } from '@/components/ui/shuip/tanstack-form/submit-button';\n\n// Simulate API call to check username availability\nasync function checkUsernameAvailability(username: string): Promise<boolean> {\n  await new Promise((resolve) => setTimeout(resolve, 1000));\n  const takenUsernames = ['admin', 'user', 'test', 'demo'];\n  return !takenUsernames.includes(username.toLowerCase());\n}\n\nexport default function TsfInputFieldAsyncValidationExample() {\n  const form = useForm({\n    defaultValues: {\n      username: '',\n      email: '',\n    },\n    onSubmit: async ({ value }) => {\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      alert(JSON.stringify(value, null, 2));\n    },\n  });\n\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        form.handleSubmit();\n      }}\n      className='space-y-4'\n    >\n      <InputField\n        form={form}\n        name='username'\n        label='Username'\n        description='Username will be checked for availability'\n        props={{ placeholder: 'Enter username' }}\n        formProps={{\n          validators: {\n            // Sync validation: runs immediately\n            onChange: ({ value }) => {\n              if (!value) return 'Username is required';\n              if (value.length < 3) return 'Username must be at least 3 characters';\n              if (!/^[a-zA-Z0-9_]+$/.test(value)) return 'Only letters, numbers, and underscores allowed';\n              return undefined;\n            },\n            // Async validation: checks availability via API\n            onChangeAsync: async ({ value }) => {\n              if (!value || value.length < 3) return undefined;\n\n              const available = await checkUsernameAvailability(value);\n              return available ? undefined : 'Username is already taken';\n            },\n            // Debounce async validation to avoid excessive API calls\n            onChangeAsyncDebounceMs: 500,\n          },\n        }}\n      />\n\n      <InputField\n        form={form}\n        name='email'\n        label='Email'\n        description='Email will be validated on blur'\n        props={{ type: 'email', placeholder: 'your@email.com' }}\n        formProps={{\n          validators: {\n            onBlur: ({ value }) => {\n              if (!value) return 'Email is required';\n              if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) return 'Invalid email format';\n              return undefined;\n            },\n          },\n        }}\n      />\n\n      <SubmitButton form={form}>Create Account</SubmitButton>\n    </form>\n  );\n}\n",
    component: React.lazy(() => import('#/examples/tsf-input-field.async-validation.tsx')),
  },
};
