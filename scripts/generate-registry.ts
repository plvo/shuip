import fs from 'node:fs';
import path from 'node:path';
import matter from 'gray-matter';

async function main() {
  let index = `// @ts-nocheck

/**
 * This file is autogenerated by @link https://github.com/plvo/shuip/blob/main/scripts/generate-registry.ts
 * Do not edit this file directly.
 */

import * as React from "react"

interface RegistryComponent {
    path: string;
    code: string;
    component: any;
}

export const REGISTRY_INDEX: Record<string, RegistryComponent> = {`;

  const registryDirectories = fs.readdirSync(path.join(process.cwd(), 'registry'));

  for (const directory of registryDirectories) {
    const dirPath = path.join(process.cwd(), 'registry', directory);
    if (!fs.statSync(dirPath).isDirectory()) continue;
    const files = fs.readdirSync(dirPath);
    for (const file of files) {
      const { registryItem } = handleFile(file, directory);
      index += registryItem;
    }
  }

  const examples = fs.readdirSync(path.join(process.cwd(), 'examples'));

  for (const example of examples) {
    const { registryItem } = handleFile(example, 'examples');
    index += registryItem;
  }

  index += `
  };
  `;

  fs.writeFileSync('./registry/__index__.ts', index);

  console.log(`âœ… Registry generated successfully`);
}

const handleFile = (file: string, type: string) => {
  const { name, base: filename } = path.parse(file);
  const pathRegistry = type === 'examples' ? `#/examples/${filename}` : `#/registry/${type}/${filename}`;

  const filePath = path.join(
    process.cwd(),
    type === 'examples' ? 'examples' : 'registry',
    type !== 'examples' ? type : '',
    file,
  );

  const fileContent = fs.readFileSync(filePath, 'utf-8');
  const { content } = matter(fileContent);

  const itemName = type === 'examples' ? `${name}.example` : name;

  return {
    itemName,
    registryItem: `
    "${itemName}": {
      path: "${pathRegistry}",
      code: ${JSON.stringify(content)},
      component: React.lazy(() => import("${pathRegistry}")),
      },`,
  };
};

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
