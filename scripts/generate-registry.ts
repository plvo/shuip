import fs from 'node:fs';
import path from 'node:path';
import matter from 'gray-matter';

const REGISTRY_PATHS = {
  ui: path.join(process.cwd(), 'registry', 'ui'),
  block: path.join(process.cwd(), 'registry', 'block'),
  examples: path.join(process.cwd(), 'registry', 'examples'),
} as const;

async function main() {
  let index = `// @ts-nocheck

/**
 * This file is autogenerated by @link https://github.com/plvo/shuip/blob/main/scripts/generate-registry.ts
 * Do not edit this file directly.
 */

import * as React from "react"

interface RegistryComponent {
    name: string;
    path: string;
    code: string;
    component: any;
}

export const registryIndex: Record<string, RegistryComponent> = {
`;

  const componentsCat: Record<string, string[]> = {};

  const registryUiFiles = fs.readdirSync(REGISTRY_PATHS.ui);

  for (const file of registryUiFiles) {
    if (!file.endsWith('.tsx')) continue;
    const { itemName, registryItem } = handleRegistryFile(file, 'ui');
    index += registryItem;
    componentsCat[itemName] = [];
  }

  const registryBlockFiles = fs.readdirSync(REGISTRY_PATHS.block);

  for (const file of registryBlockFiles) {
    if (!file.endsWith('.tsx')) continue;
    const { itemName, registryItem } = handleRegistryFile(file, 'block');
    index += registryItem;
    componentsCat[itemName] = [];
  }

  const registryExamplesFiles = fs.readdirSync(REGISTRY_PATHS.examples);

  for (const file of registryExamplesFiles) {
    if (!file.endsWith('.tsx')) continue;
    const { itemName, registryItem } = handleRegistryFile(file, 'examples');
    index += registryItem;
    componentsCat[itemName.split('.')[0]].push(itemName);
  }

  index += `
  };
  /**
   * registry/(ui|block): registry/examples[] 
   */ 
  export const COMPONENT_CATEGORIES:Record<string, string[]> = ${JSON.stringify(componentsCat, null, 2)};
  `;

  fs.writeFileSync('./registry/__index__.ts', index);

  console.log(`âœ… Registry generated successfully, ${Object.keys(componentsCat).length} components found`);
}

const handleRegistryFile = (file: string, type: keyof typeof REGISTRY_PATHS) => {
  const { name, base: filename } = path.parse(file);
  const pathRegistry = `#/registry/${type}/${filename}`;
  const fileContent = fs.readFileSync(path.join(REGISTRY_PATHS[type], file), 'utf-8');
  const { content } = matter(fileContent);

  const itemName = type === 'examples' ? `${name}.example` : name;

  return {
    itemName,
    registryItem: `
    "${itemName}": {
      name: "${itemName}",
      path: "${pathRegistry}",
      code: ${JSON.stringify(content)},
      component: React.lazy(() => import("${pathRegistry}")),
      },`,
  };
};

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
