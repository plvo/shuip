{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tsf-select-field",
  "type": "registry:ui",
  "dependencies": ["@tanstack/react-form", "@radix-ui/react-select"],
  "registryDependencies": ["field", "select"],
  "files": [
    {
      "path": "./registry/ui/tsf-select-field.tsx",
      "content": "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\n/**\n * Key is the label, value is the value\n * @example\n * const options: SelectFieldOption = {\n *   'First': '1',\n *   'Second': '2',\n *   'Third': '3',\n * };\n */\nexport type SelectFieldOption = Record<string, string>;\n\nexport interface SelectFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  options: SelectFieldOption;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<typeof Select>;\n}\n\nexport function SelectField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({\n  form,\n  name,\n  options,\n  label,\n  description,\n  placeholder,\n  formProps,\n  fieldProps,\n  props,\n}: SelectFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <Select\n              name={field.name}\n              value={field.state.value as string}\n              onValueChange={(value) => field.handleChange(value as TData)}\n              aria-invalid={!isValid}\n              {...props}\n            >\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n              <SelectContent>\n                {Object.entries(options).map(([label, value]) => (\n                  <SelectItem key={value} value={value}>\n                    {label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/tanstack-form/select-field.tsx"
    }
  ]
}
