{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tsf-radio-field",
  "type": "registry:ui",
  "dependencies": ["@tanstack/react-form"],
  "registryDependencies": ["field", "radio-group"],
  "files": [
    {
      "path": "./registry/ui/tsf-radio-field.tsx",
      "content": "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { Label } from '@/components/ui/label';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\n\nexport interface RadioFieldOption {\n  label: string;\n  value: string;\n}\n\nexport interface RadioFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  options: RadioFieldOption[];\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<typeof Field>;\n  props?: React.ComponentProps<typeof RadioGroup>;\n}\n\nexport function RadioField<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName> = DeepValue<TFormData, TName>,\n>({ form, name, options, label, description, formProps, fieldProps, props }: RadioFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const { isValid, errors } = field.state.meta;\n\n        return (\n          <Field className='gap-2' data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <RadioGroup\n              name={field.name}\n              value={field.state.value as string}\n              onValueChange={(value) => field.handleChange(value as TData)}\n              onBlur={field.handleBlur}\n              {...props}\n            >\n              {options.map(({ label, value }) => (\n                <div key={value} className='flex items-center space-x-3 space-y-0'>\n                  <RadioGroupItem id={`${field.name}-${value}`} value={value} aria-invalid={!isValid} />\n                  <Label htmlFor={`${field.name}-${value}`}>{label}</Label>\n                </div>\n              ))}\n            </RadioGroup>\n            {!isValid && (\n              <FieldError className='text-xs text-left' errors={errors.map((error) => ({ message: error }))} />\n            )}\n            {description && <FieldDescription className='text-xs'>{description}</FieldDescription>}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/tanstack-form/radio-field.tsx"
    }
  ]
}
