{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tsf-input-field",
  "type": "registry:ui",
  "dependencies": ["@tanstack/react-form"],
  "registryDependencies": ["field", "input"],
  "files": [
    {
      "path": "./registry/ui/tsf-input-field.tsx",
      "content": "import type {\n  DeepKeys,\n  DeepValue,\n  FieldAsyncValidateOrFn,\n  FieldOptions,\n  FieldValidateOrFn,\n  FormAsyncValidateOrFn,\n  FormValidateOrFn,\n  ReactFormApi,\n} from '@tanstack/react-form';\nimport { Field, FieldDescription, FieldError, FieldLabel } from '@/components/ui/field';\nimport { Input } from '@/components/ui/input';\n\nexport interface InputFieldProps<\n  TFormData,\n  TName extends DeepKeys<TFormData>,\n  TData extends DeepValue<TFormData, TName>,\n> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  name: TName;\n  label?: string;\n  description?: string;\n  formProps?: Partial<\n    FieldOptions<\n      TFormData,\n      TName,\n      TData,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldValidateOrFn<TFormData, TName, TData>,\n      undefined | FieldAsyncValidateOrFn<TFormData, TName, TData>\n    >\n  >;\n  fieldProps?: React.ComponentProps<'div'> & { orientation?: 'vertical' | 'horizontal' | 'responsive' };\n  props?: React.ComponentProps<'input'>;\n}\n\nexport function InputField<TFormData, TName extends DeepKeys<TFormData>, TData extends DeepValue<TFormData, TName>>({\n  form,\n  name,\n  label,\n  description,\n  formProps,\n  fieldProps,\n  props,\n}: InputFieldProps<TFormData, TName, TData>) {\n  return (\n    <form.Field name={name} {...formProps}>\n      {(field) => {\n        const errors: Array<{ message: string }> = field.state.meta.errors.map((error) => ({ message: error ?? '' }));\n        const isValid = field.state.meta.isValid && errors.length === 0;\n\n        return (\n          <Field data-invalid={!isValid} {...fieldProps}>\n            {label && <FieldLabel>{label}</FieldLabel>}\n            <Input\n              type='text'\n              name={field.name}\n              value={field.state.value as string}\n              onChange={(e) => field.handleChange(e.target.value as TData)}\n              onBlur={field.handleBlur}\n              aria-invalid={!isValid}\n              {...props}\n            />\n            {description && <FieldDescription>{description}</FieldDescription>}\n            {!isValid && <FieldError errors={errors} />}\n          </Field>\n        );\n      }}\n    </form.Field>\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/tanstack-form/input-field.tsx"
    }
  ]
}
