{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-field",
  "type": "registry:ui",
  "dependencies": ["react-hook-form", "lucide-react"],
  "registryDependencies": ["form", "input", "button"],
  "files": [
    {
      "path": "./registry/ui/input-field.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Eye, EyeOff } from 'lucide-react';\nimport * as React from 'react';\nimport type { ControllerRenderProps, FieldPath, FieldValues, UseFormRegisterReturn } from 'react-hook-form';\n\nexport interface InputFieldProps<T extends FieldValues> extends React.ComponentProps<typeof Input> {\n  register: UseFormRegisterReturn<FieldPath<T>>;\n  label?: string;\n  description?: string;\n}\n\nexport function InputField<T extends FieldValues>({ register, label, description, ...props }: InputFieldProps<T>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const getInputType = () => {\n    if (props.type === 'password') {\n      return showPassword ? 'text' : 'password';\n    }\n    return props.type ?? 'text';\n  };\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    field: ControllerRenderProps<FieldValues, FieldPath<FieldValues>>,\n  ) => {\n    const value = e.target.value;\n    if (props.type === 'number') return field.onChange(value === '' ? '' : Number(value));\n    if (props.type === 'date') return field.onChange(value === '' ? '' : new Date(value));\n    return field.onChange(value);\n  };\n\n  return (\n    <FormField\n      {...register}\n      render={({ field }) => {\n        return (\n          <FormItem>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-xs opacity-80' />\n            </FormLabel>\n            <FormControl>\n              <div className='relative'>\n                <Input {...field} {...props} type={getInputType()} onChange={(e) => onChange(e, field)} />\n                {props.type === 'password' && (\n                  <PasswordButton showPassword={showPassword} setShowPassword={setShowPassword} />\n                )}\n              </div>\n            </FormControl>\n            {description && <p className='text-muted-foreground text-xs'>{description}</p>}\n            <FormMessage className='sm:hidden text-xs text-left opacity-80' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n\ninterface PasswordButtonProps {\n  showPassword: boolean;\n  setShowPassword: (showPassword: boolean) => void;\n}\n\nfunction PasswordButton({ showPassword, setShowPassword }: PasswordButtonProps) {\n  return (\n    <Button\n      type='button'\n      variant='ghost'\n      size='sm'\n      className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n      onClick={() => setShowPassword(!showPassword)}\n      tabIndex={-1}\n      aria-label={showPassword ? 'Hide password' : 'Show password'}\n    >\n      {showPassword ? <EyeOff className='size-4' aria-hidden='true' /> : <Eye className='size-4' aria-hidden='true' />}\n      <span className='sr-only'>{showPassword ? 'Hide password' : 'Show password'}</span>\n    </Button>\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/input-field.tsx"
    }
  ]
}
