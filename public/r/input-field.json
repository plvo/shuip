{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-field",
  "type": "registry:ui",
  "dependencies": ["react-hook-form", "lucide-react"],
  "registryDependencies": ["form", "input", "button"],
  "files": [
    {
      "path": "./registry/ui/input-field.tsx",
      "content": "'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Eye, EyeOff } from 'lucide-react';\nimport * as React from 'react';\nimport type { Control, ControllerRenderProps, Path } from 'react-hook-form';\n\nexport interface InputFieldProps<T extends Record<string, any>> extends React.ComponentProps<typeof Input> {\n  control: Control<T>;\n  name: Path<T>;\n  label: string;\n  description?: string;\n}\n\nexport function InputField<TFieldValues extends Record<string, any>>({\n  control,\n  name,\n  label,\n  description,\n  ...props\n}: InputFieldProps<TFieldValues>) {\n  const [showPassword, setShowPassword] = React.useState(false);\n\n  const getInputType = () => {\n    if (props.type === 'password') {\n      return showPassword ? 'text' : 'password';\n    }\n    return props.type ?? 'text';\n  };\n\n  const onChange = (\n    e: React.ChangeEvent<HTMLInputElement>,\n    field: ControllerRenderProps<TFieldValues, Path<TFieldValues>>,\n  ) => {\n    const value = e.target.value;\n    if (props.type === 'number') return field.onChange(value === '' ? '' : Number(value));\n    if (props.type === 'date') return field.onChange(value === '' ? '' : new Date(value));\n    return field.onChange(value);\n  };\n\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => {\n        return (\n          <FormItem className='space-y-1.5'>\n            <FormLabel className='flex items-center justify-between'>\n              {label}\n              <FormMessage className='max-sm:hidden text-sm' />\n            </FormLabel>\n            <FormControl>\n              <div className='relative'>\n                <Input {...field} {...props} type={getInputType()} onChange={(e) => onChange(e, field)} />\n                {props.type === 'password' && (\n                  <Button\n                    type='button'\n                    variant='ghost'\n                    size='sm'\n                    className='absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent'\n                    onClick={() => setShowPassword((prev) => !prev)}\n                    tabIndex={-1}\n                    aria-label={showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe'}\n                  >\n                    {showPassword ? (\n                      <EyeOff className='h-4 w-4' aria-hidden='true' />\n                    ) : (\n                      <Eye className='h-4 w-4' aria-hidden='true' />\n                    )}\n                    <span className='sr-only'>\n                      {showPassword ? 'Masquer le mot de passe' : 'Afficher le mot de passe'}\n                    </span>\n                  </Button>\n                )}\n              </div>\n            </FormControl>\n            {description && <p className='text-muted-foreground text-sm'>{description}</p>}\n            <FormMessage className='sm:hidden text-xs text-left' />\n          </FormItem>\n        );\n      }}\n    />\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/input-field.tsx"
    }
  ]
}
