{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "form-utils",
  "type": "registry:lib",
  "dependencies": ["zod"],
  "files": [
    {
      "path": "./registry/lib/form-utils.ts",
      "content": "import z from 'zod';\n\n/**\n * Get the changed fields between two objects\n * @param oldObject - The old object\n * @param newObject - The new object\n * @param options - Configuration options\n * @returns The changed fields\n * @example\n * getChangedFields({ a: 1 }, { a: 1 }) // { }\n * getChangedFields({ a: 1 }, { a: 2 }) // { a: 2 }\n * getChangedFields({ a: 1 }, { b: 1 }) // { a: undefined, b:1 }\n */\n\nexport function getChangedFields<T extends Record<string, unknown>>(\n  oldObject: T | null | undefined,\n  newObject: T | null | undefined,\n): Partial<T> {\n  const changedFields: Partial<T> = {};\n\n  if (!oldObject && !newObject) {\n    return changedFields;\n  }\n\n  if (!oldObject) {\n    return newObject ? { ...newObject } : changedFields;\n  }\n\n  if (!newObject) {\n    const result: Partial<T> = {};\n    Object.keys(oldObject).forEach((key) => {\n      result[key as keyof T] = undefined as T[keyof T];\n    });\n    return result;\n  }\n\n  const allKeys = new Set([...Object.keys(oldObject), ...Object.keys(newObject)]);\n\n  allKeys.forEach((key) => {\n    const typedKey = key as keyof T;\n    const oldValue = oldObject[typedKey];\n    const newValue = newObject[typedKey];\n\n    if (!isDeepEqual(oldValue, newValue)) {\n      changedFields[typedKey] = newValue;\n    }\n  });\n\n  return changedFields;\n}\n\n/**\n * Deep equality comparison helper function\n * @param a - The first value to compare\n * @param b - The second value to compare\n * @returns True if the values are deeply equal, false otherwise\n * @example\n * isDeepEqual(1, 1) // true\n * isDeepEqual(1, '1') // false\n * isDeepEqual({ a: 1 }, { a: 1 }) // true\n * isDeepEqual({ a: 1 }, { a: 2 }) // false\n * isDeepEqual([1, 2, 3], [1, 2, 3]) // true\n * isDeepEqual([1, 2, 3], [1, 2, 4]) // false\n */\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) return true;\n\n  if (a == null || b == null) return a === b;\n  if (typeof a !== typeof b) return false;\n\n  if (typeof a !== 'object') return a === b;\n\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    return a.every((item, index) => isDeepEqual(item, b[index]));\n  }\n\n  const aObj = a as Record<string, unknown>;\n  const bObj = b as Record<string, unknown>;\n\n  const aKeys = Object.keys(aObj);\n  const bKeys = Object.keys(bObj);\n\n  if (aKeys.length !== bKeys.length) return false;\n\n  return aKeys.every((key) => bKeys.includes(key) && isDeepEqual(aObj[key], bObj[key]));\n}\n\n/**\n * Get the default values for a zod schema\n * @param schema - The zod schema\n * @param data - The data to use to get the default values\n * @returns The default values\n * @example\n * // Basic usage\n * getZodDefaultValues(z.object({ name: z.string() })) // { name: '' }\n *\n * // With nested objects\n * getZodDefaultValues(z.object({\n *   user: z.object({\n *     name: z.string(),\n *     age: z.number()\n *   })\n * })) // { user: { name: '', age: 0 } }\n *\n * // With provided data\n * getZodDefaultValues(\n *   z.object({ name: z.string(), age: z.number() }),\n *   { name: 'John' }\n * ) // { name: 'John', age: 0 }\n *\n */\nexport function getZodDefaultValues<T extends z.ZodObject<z.ZodRawShape>>(\n  schema: T,\n  data?: Partial<z.infer<T>>,\n): z.infer<T> {\n  return Object.keys(schema.shape).reduce<Record<string, unknown>>((acc, key) => {\n    acc[key] = data && data[key] !== undefined ? data[key] : zodTypeDefaultValue(schema.shape[key]);\n    return acc;\n  }, {});\n}\n\n/**\n * Get the default value for a zod type\n * @param key - The zod type\n * @returns The default value\n * @example\n * zodTypeDefaultValue(z.string()) // ''\n * zodTypeDefaultValue(z.number()) // 0\n * zodTypeDefaultValue(z.boolean()) // false\n * zodTypeDefaultValue(z.date()) // ''\n * zodTypeDefaultValue(z.array(z.string())) // []\n * zodTypeDefaultValue(z.object({ name: z.string() })) // { name: '' }\n */\nexport function zodTypeDefaultValue(key: z.ZodTypeAny): unknown {\n  switch (key.constructor) {\n    case z.ZodString:\n      return '';\n    case z.ZodNumber:\n      return 0;\n    case z.ZodBoolean:\n      return false;\n    case z.ZodDate:\n      return undefined;\n    case z.ZodArray:\n      return [];\n    case z.ZodObject: {\n      const objectSchema = key as z.ZodObject<z.ZodRawShape>;\n      return Object.keys(objectSchema.shape).reduce<Record<string, unknown>>((acc, fieldKey) => {\n        acc[fieldKey] = zodTypeDefaultValue(objectSchema.shape[fieldKey]);\n        return acc;\n      }, {});\n    }\n    case z.ZodEnum: {\n      return undefined;\n    }\n    case z.ZodNativeEnum: {\n      return undefined;\n    }\n    case z.ZodOptional:\n      return undefined;\n    case z.ZodNullable:\n      return null;\n    default:\n      return undefined;\n  }\n}\n",
      "type": "registry:lib",
      "target": "./lib/shuip/form-utils.ts"
    }
  ]
}
