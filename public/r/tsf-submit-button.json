{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tsf-submit-button",
  "type": "registry:ui",
  "dependencies": ["@tanstack/react-form"],
  "registryDependencies": ["button"],
  "files": [
    {
      "path": "./registry/ui/tsf-submit-button.tsx",
      "content": "import type { FormAsyncValidateOrFn, FormValidateOrFn, ReactFormApi } from '@tanstack/react-form';\nimport type { VariantProps } from 'class-variance-authority';\nimport { Loader2Icon } from 'lucide-react';\nimport { Button, type buttonVariants } from '@/components/ui/button';\n\ntype ButtonProps = React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  };\n\nexport interface SubmitButtonProps<TFormData> {\n  form: ReactFormApi<\n    TFormData,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    undefined | FormAsyncValidateOrFn<TFormData>,\n    any\n  >;\n  children?: React.ReactNode;\n  props?: ButtonProps;\n}\n\nexport function SubmitButton<TFormData>({ form, children = 'Submit', props }: SubmitButtonProps<TFormData>) {\n  return (\n    <form.Subscribe selector={(state) => [state.isSubmitting, state.canSubmit]}>\n      {([isSubmitting, canSubmit]) => (\n        <Button type='submit' disabled={isSubmitting || !canSubmit} className='transition-all duration-300' {...props}>\n          {isSubmitting && <Loader2Icon role='status' aria-label='Loading' className={'size-4 animate-spin'} />}\n          {children}\n        </Button>\n      )}\n    </form.Subscribe>\n  );\n}\n",
      "type": "registry:ui",
      "target": "./components/ui/shuip/tanstack-form/submit-button.tsx"
    }
  ]
}
