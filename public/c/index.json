[
  {
    "name": "button.signout",
    "type": "registry:ui",
    "dependencies": [
      "next-auth",
      "lucide-react"
    ],
    "files": [
      {
        "path": "button.signout.tsx",
        "content": "'use client';\n\n// import { signOut } from \"next-auth/react\";\nimport { Button } from '@/components/ui/button';\nimport { LogOut } from 'lucide-react';\nimport { DialogConfirmation } from './dialog.confirmation';\n\nexport default function ButtonLogout({ withLogo, onConfirm }: { withLogo?: boolean; onConfirm?: () => void }) {\n  return (\n    <DialogConfirmation\n      trigger={\n        <Button variant=\"outline\" className=\"text-destructive\" size={withLogo ? 'icon' : 'default'}>\n          {withLogo ? <LogOut /> : 'Sign out'}\n        </Button>\n      }\n      title=\"Sign out\"\n      description=\"Are you sure you want to sign out?\"\n      labelConfirmButton=\"Sign out\"\n      onConfirm={() => onConfirm}\n      //   onConfirm={() => signOut()}\n    />\n  );\n}\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/button.signout.tsx"
      }
    ],
    "registryDependencies": [
      "button"
    ]
  },
  {
    "name": "hover.item",
    "type": "registry:ui",
    "dependencies": [],
    "files": [
      {
        "path": "hover.item.tsx",
        "content": "import type React from 'react';\nimport { HoverCard, HoverCardContent, HoverCardTrigger } from '@/components/ui/hover-card';\n\nexport default function HoverItem({\n  trigger,\n  content,\n}: {\n  trigger: string | React.JSX.Element | React.ReactNode; // can be used as children\n  content: string | React.JSX.Element;\n}) {\n  return (\n    <HoverCard>\n      <HoverCardTrigger className=\"cursor-pointer\">{trigger}</HoverCardTrigger>\n      <HoverCardContent className=\"text-sm w-full\">{content}</HoverCardContent>\n    </HoverCard>\n  );\n}\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/hover.item.tsx"
      }
    ],
    "registryDependencies": [
      "hover-card"
    ]
  },
  {
    "name": "dialog.confirmation",
    "type": "registry:ui",
    "dependencies": [],
    "files": [
      {
        "path": "dialog.confirmation.tsx",
        "content": "import { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport type { JSX } from 'react';\n\nexport function DialogConfirmation({\n  trigger,\n  title,\n  description,\n  labelConfirmButton,\n  onConfirm,\n}: {\n  trigger: JSX.Element;\n  title: string;\n  description: string;\n  labelConfirmButton: string;\n  onConfirm: () => void;\n}) {\n  return (\n    <Dialog>\n      <DialogTrigger asChild>{trigger}</DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogDescription className=\"md:text-left\">{description}</DialogDescription>\n        </DialogHeader>\n        <DialogFooter>\n          <Button onClick={onConfirm}>{labelConfirmButton}</Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/dialog.confirmation.tsx"
      }
    ],
    "registryDependencies": [
      "button",
      "dialog"
    ]
  },
  {
    "name": "button.submit",
    "type": "registry:ui",
    "dependencies": [
      "radix-ui"
    ],
    "files": [
      {
        "path": "button.submit.tsx",
        "content": "import { ReloadIcon } from '@radix-ui/react-icons';\nimport { Button, ButtonProps } from '@/components/ui/button';\nimport type { JSX, MouseEventHandler } from 'react';\nimport { cn } from '@/lib/utils';\n\nexport interface ButtonSubmitProps {\n  onClick: MouseEventHandler<HTMLButtonElement>;\n  label: JSX.Element | string;\n  disabled?: boolean;\n  loading?: boolean;\n}\n\nexport function ButtonSubmit({ onClick, label, disabled, loading, ...props }: ButtonSubmitProps & ButtonProps) {\n  return (\n    <Button\n      type=\"submit\"\n      variant={'default'}\n      onClick={onClick}\n      disabled={disabled || loading}\n      className={cn('w-full', ...(props?.className ? [props.className] : []))}\n      {...props}\n    >\n      {loading && <ReloadIcon className=\"mr-2 h-4 w-4 animate-spin\" />}\n      {label}\n    </Button>\n  );\n}\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/button.submit.tsx"
      }
    ],
    "registryDependencies": [
      "button"
    ]
  },
  {
    "name": "select.form-field",
    "type": "registry:ui",
    "dependencies": [
      "react-hook-form"
    ],
    "files": [
      {
        "path": "select.form-field.tsx",
        "content": "'use client';\n\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Control, Path, PathValue } from 'react-hook-form';\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n}\n\nexport interface SelectFieldProps<T extends Record<string, string>> {\n  control: Control<T>;\n  name: Path<T>;\n  values: SelectOption[];\n  defaultValues?: PathValue<T, Path<T>>;\n  label: string;\n  placeholder: string;\n  description?: string;\n}\n\nexport const SelectField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  values,\n  defaultValues,\n  label,\n  placeholder,\n  description,\n}: SelectFieldProps<TFieldValues>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      defaultValue={defaultValues}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel>{label}</FormLabel>\n          <Select onValueChange={field.onChange} defaultValue={field.value}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {values.map((item) => (\n                <SelectItem key={item.value} value={item.value}>\n                  {item.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          {description && <FormDescription>{description}</FormDescription>}\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/select.form-field.tsx"
      }
    ],
    "registryDependencies": [
      "form",
      "select"
    ]
  },
  {
    "name": "button.theme",
    "type": "registry:ui",
    "dependencies": [
      "lucide-react",
      "next-themes"
    ],
    "files": [
      {
        "path": "button.theme.tsx",
        "content": "'use client';\n\nimport * as React from 'react';\nimport { Laptop, Moon, Sun } from 'lucide-react';\nimport { useTheme } from 'next-themes';\nimport { Button } from '@/components/ui/button';\n\nexport default function ButtonTheme({ withText }: { withText?: boolean }) {\n  const { theme, setTheme } = useTheme();\n  const [currentTheme, setCurrentTheme] = React.useState<'system' | 'light' | 'dark'>('system');\n\n  React.useEffect(() => {\n    setCurrentTheme(theme as 'system' | 'light' | 'dark');\n  }, [theme]);\n\n  const cycleTheme = () => {\n    const themes: ('system' | 'light' | 'dark')[] = ['system', 'light', 'dark'];\n    const currentIndex = themes.indexOf(currentTheme);\n    const nextIndex = (currentIndex + 1) % themes.length;\n    setTheme(themes[nextIndex]);\n  };\n\n  return (\n    <Button variant=\"outline\" size={withText ? 'default' : 'icon'} onClick={cycleTheme}>\n      {currentTheme === 'system' && <Laptop className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {currentTheme === 'light' && <Sun className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {currentTheme === 'dark' && <Moon className=\"h-[1.2rem] w-[1.2rem]\" />}\n      {withText && (\n        <span className=\"ml-2 capitalize\">\n          {currentTheme.charAt(0).toUpperCase() + currentTheme.slice(1)}\n        </span>\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/button.theme.tsx"
      }
    ],
    "registryDependencies": [
      "button"
    ]
  },
  {
    "name": "input.form-field",
    "type": "registry:ui",
    "dependencies": [
      "react-hook-form"
    ],
    "files": [
      {
        "path": "input.form-field.tsx",
        "content": "'use client';\n\nimport { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport type { Control, Path } from 'react-hook-form';\n\nconst InputField = <TFieldValues extends Record<string, string>>({\n  control,\n  name,\n  label,\n  description,\n  ...props\n}: {\n  control: Control<TFieldValues>;\n  name: Path<TFieldValues>;\n  label: string;\n  description?: string;\n} & React.ComponentProps<typeof Input>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => {\n        if (!field) {\n          console.error('Field is missing for InputField', name);\n          return <></>;\n        }\n\n        return (\n          <FormItem className=\"space-y-1.5\">\n            <FormLabel className=\"flex items-center justify-between\">\n              {label}\n              <FormMessage className=\"max-sm:hidden text-sm\" />\n            </FormLabel>\n            <FormControl>\n              <Input {...field} {...props} />\n            </FormControl>\n            {description && <FormDescription>{description}</FormDescription>}\n            <FormMessage className=\"sm:hidden text-xs text-left\" />\n          </FormItem>\n        );\n      }}\n    />\n  );\n};\n\nexport default InputField;\n",
        "type": "registry:ui",
        "target": "./components/ui/shuip/input.form-field.tsx"
      }
    ],
    "registryDependencies": [
      "form",
      "input"
    ]
  }
]